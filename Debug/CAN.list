
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080032d0  080032d0  000042d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003384  08003384  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003384  08003384  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003384  08003384  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003384  08003384  00004384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003388  08003388  00004388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800338c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  080033f4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080033f4  00005270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e47  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca9  00000000  00000000  0000ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0000fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000653  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001834a  00000000  00000000  00010a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaaa  00000000  00000000  00028d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008658f  00000000  00000000  0003383f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9dce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  000b9e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000bc660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080032b8 	.word	0x080032b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080032b8 	.word	0x080032b8

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b17      	ldr	r3, [pc, #92]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000152:	4a18      	ldr	r2, [pc, #96]	@ (80001b4 <MX_CAN_Init+0x68>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000156:	4b16      	ldr	r3, [pc, #88]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000158:	2204      	movs	r2, #4
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	4b14      	ldr	r3, [pc, #80]	@ (80001b0 <MX_CAN_Init+0x64>)
 800015e:	2200      	movs	r2, #0
 8000160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000162:	4b13      	ldr	r3, [pc, #76]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000164:	2200      	movs	r2, #0
 8000166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000168:	4b11      	ldr	r3, [pc, #68]	@ (80001b0 <MX_CAN_Init+0x64>)
 800016a:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800016e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000170:	4b0f      	ldr	r3, [pc, #60]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000172:	2200      	movs	r2, #0
 8000174:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000176:	4b0e      	ldr	r3, [pc, #56]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000178:	2200      	movs	r2, #0
 800017a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800017c:	4b0c      	ldr	r3, [pc, #48]	@ (80001b0 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000182:	4b0b      	ldr	r3, [pc, #44]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000188:	4b09      	ldr	r3, [pc, #36]	@ (80001b0 <MX_CAN_Init+0x64>)
 800018a:	2201      	movs	r2, #1
 800018c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800018e:	4b08      	ldr	r3, [pc, #32]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000194:	4b06      	ldr	r3, [pc, #24]	@ (80001b0 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019a:	4805      	ldr	r0, [pc, #20]	@ (80001b0 <MX_CAN_Init+0x64>)
 800019c:	f000 fbdc 	bl	8000958 <HAL_CAN_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80001a6:	f000 f99a 	bl	80004de <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000084 	.word	0x20000084
 80001b4:	40006400 	.word	0x40006400

080001b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b088      	sub	sp, #32
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c0:	f107 0310 	add.w	r3, r7, #16
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a28      	ldr	r2, [pc, #160]	@ (8000274 <HAL_CAN_MspInit+0xbc>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d149      	bne.n	800026c <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001d8:	4b27      	ldr	r3, [pc, #156]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a26      	ldr	r2, [pc, #152]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e2:	61d3      	str	r3, [r2, #28]
 80001e4:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b21      	ldr	r3, [pc, #132]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a20      	ldr	r2, [pc, #128]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000278 <HAL_CAN_MspInit+0xc0>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000208:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800020c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4817      	ldr	r0, [pc, #92]	@ (800027c <HAL_CAN_MspInit+0xc4>)
 800021e:	f001 f8e3 	bl	80013e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000228:	2302      	movs	r3, #2
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4811      	ldr	r0, [pc, #68]	@ (800027c <HAL_CAN_MspInit+0xc4>)
 8000238:	f001 f8d6 	bl	80013e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2013      	movs	r0, #19
 8000242:	f001 f89a 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000246:	2013      	movs	r0, #19
 8000248:	f001 f8b3 	bl	80013b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	2014      	movs	r0, #20
 8000252:	f001 f892 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000256:	2014      	movs	r0, #20
 8000258:	f001 f8ab 	bl	80013b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800025c:	2200      	movs	r2, #0
 800025e:	2100      	movs	r1, #0
 8000260:	2015      	movs	r0, #21
 8000262:	f001 f88a 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000266:	2015      	movs	r0, #21
 8000268:	f001 f8a3 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40006400 	.word	0x40006400
 8000278:	40021000 	.word	0x40021000
 800027c:	40010800 	.word	0x40010800

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0310 	add.w	r3, r7, #16
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000294:	4b20      	ldr	r3, [pc, #128]	@ (8000318 <MX_GPIO_Init+0x98>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a1f      	ldr	r2, [pc, #124]	@ (8000318 <MX_GPIO_Init+0x98>)
 800029a:	f043 0310 	orr.w	r3, r3, #16
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0310 	and.w	r3, r3, #16
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a19      	ldr	r2, [pc, #100]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002b2:	f043 0320 	orr.w	r3, r3, #32
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0320 	and.w	r3, r3, #32
 80002c0:	60bb      	str	r3, [r7, #8]
 80002c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c4:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a13      	ldr	r2, [pc, #76]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002ca:	f043 0304 	orr.w	r3, r3, #4
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0304 	and.w	r3, r3, #4
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000318 <MX_GPIO_Init+0x98>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0308 	and.w	r3, r3, #8
 80002f0:	603b      	str	r3, [r7, #0]
 80002f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	4619      	mov	r1, r3
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <MX_GPIO_Init+0x9c>)
 800030a:	f001 f86d 	bl	80013e8 <HAL_GPIO_Init>

}
 800030e:	bf00      	nop
 8000310:	3720      	adds	r7, #32
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000
 800031c:	40011000 	.word	0x40011000

08000320 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHARPROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFF);
 8000328:	1d39      	adds	r1, r7, #4
 800032a:	23ff      	movs	r3, #255	@ 0xff
 800032c:	2201      	movs	r2, #1
 800032e:	4804      	ldr	r0, [pc, #16]	@ (8000340 <__io_putchar+0x20>)
 8000330:	f001 fe56 	bl	8001fe0 <HAL_UART_Transmit>

  return ch;
 8000334:	687b      	ldr	r3, [r7, #4]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200000d8 	.word	0x200000d8

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f000 fa80 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f886 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000350:	f7ff ff96 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000354:	f000 f9ec 	bl	8000730 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000358:	f7ff fef8 	bl	800014c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  printf("start!\r\n");
 800035c:	4835      	ldr	r0, [pc, #212]	@ (8000434 <main+0xf0>)
 800035e:	f002 f93d 	bl	80025dc <puts>

  /* Can Start */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000362:	4835      	ldr	r0, [pc, #212]	@ (8000438 <main+0xf4>)
 8000364:	f000 fbf3 	bl	8000b4e <HAL_CAN_Start>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <main+0x2e>
  {
	  Error_Handler();
 800036e:	f000 f8b6 	bl	80004de <Error_Handler>
  }

  TxHeader.StdId = 0x321;
 8000372:	4b32      	ldr	r3, [pc, #200]	@ (800043c <main+0xf8>)
 8000374:	f240 3221 	movw	r2, #801	@ 0x321
 8000378:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 800037a:	4b30      	ldr	r3, [pc, #192]	@ (800043c <main+0xf8>)
 800037c:	2201      	movs	r2, #1
 800037e:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8000380:	4b2e      	ldr	r3, [pc, #184]	@ (800043c <main+0xf8>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000386:	4b2d      	ldr	r3, [pc, #180]	@ (800043c <main+0xf8>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 800038c:	4b2b      	ldr	r3, [pc, #172]	@ (800043c <main+0xf8>)
 800038e:	2208      	movs	r2, #8
 8000390:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000392:	4b2a      	ldr	r3, [pc, #168]	@ (800043c <main+0xf8>)
 8000394:	2200      	movs	r2, #0
 8000396:	751a      	strb	r2, [r3, #20]

  TxData[0] = 1;
 8000398:	4b29      	ldr	r3, [pc, #164]	@ (8000440 <main+0xfc>)
 800039a:	2201      	movs	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
  TxData[1] = 2;
 800039e:	4b28      	ldr	r3, [pc, #160]	@ (8000440 <main+0xfc>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	705a      	strb	r2, [r3, #1]
  TxData[2] = 3;
 80003a4:	4b26      	ldr	r3, [pc, #152]	@ (8000440 <main+0xfc>)
 80003a6:	2203      	movs	r2, #3
 80003a8:	709a      	strb	r2, [r3, #2]
  TxData[3] = 4;
 80003aa:	4b25      	ldr	r3, [pc, #148]	@ (8000440 <main+0xfc>)
 80003ac:	2204      	movs	r2, #4
 80003ae:	70da      	strb	r2, [r3, #3]
  TxData[4] = 5;
 80003b0:	4b23      	ldr	r3, [pc, #140]	@ (8000440 <main+0xfc>)
 80003b2:	2205      	movs	r2, #5
 80003b4:	711a      	strb	r2, [r3, #4]
  TxData[5] = 6;
 80003b6:	4b22      	ldr	r3, [pc, #136]	@ (8000440 <main+0xfc>)
 80003b8:	2206      	movs	r2, #6
 80003ba:	715a      	strb	r2, [r3, #5]
  TxData[6] = 7;
 80003bc:	4b20      	ldr	r3, [pc, #128]	@ (8000440 <main+0xfc>)
 80003be:	2207      	movs	r2, #7
 80003c0:	719a      	strb	r2, [r3, #6]
  TxData[7] = 8;
 80003c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000440 <main+0xfc>)
 80003c4:	2208      	movs	r2, #8
 80003c6:	71da      	strb	r2, [r3, #7]
//  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//  {
//	  printf("Can Send Fail\r\n");
//      Error_Handler();
//  }
  printf("CAN initialized\r\n");
 80003c8:	481e      	ldr	r0, [pc, #120]	@ (8000444 <main+0x100>)
 80003ca:	f002 f907 	bl	80025dc <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	/* Check button state */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) // Button pressed (active high)
 80003ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d2:	481d      	ldr	r0, [pc, #116]	@ (8000448 <main+0x104>)
 80003d4:	f001 f98c 	bl	80016f0 <HAL_GPIO_ReadPin>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d123      	bne.n	8000426 <main+0xe2>
	{
		if (buttonPressed == 0) // Check if button press is new
 80003de:	4b1b      	ldr	r3, [pc, #108]	@ (800044c <main+0x108>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d122      	bne.n	800042c <main+0xe8>
		{
			buttonPressed = 1; // Set button pressed flag
 80003e6:	4b19      	ldr	r3, [pc, #100]	@ (800044c <main+0x108>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]

			/* Toggle TxData[0] */
			TxData[0] ^= 0x01; // Toggle the LSB of TxData[0]
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <main+0xfc>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	f083 0301 	eor.w	r3, r3, #1
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <main+0xfc>)
 80003f8:	701a      	strb	r2, [r3, #0]

			/* Transmit CAN message */
			if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80003fa:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <main+0x10c>)
 80003fc:	4a10      	ldr	r2, [pc, #64]	@ (8000440 <main+0xfc>)
 80003fe:	490f      	ldr	r1, [pc, #60]	@ (800043c <main+0xf8>)
 8000400:	480d      	ldr	r0, [pc, #52]	@ (8000438 <main+0xf4>)
 8000402:	f000 fbe8 	bl	8000bd6 <HAL_CAN_AddTxMessage>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d005      	beq.n	8000418 <main+0xd4>
			{
				printf("CAN Send Fail\r\n");
 800040c:	4811      	ldr	r0, [pc, #68]	@ (8000454 <main+0x110>)
 800040e:	f002 f8e5 	bl	80025dc <puts>
				Error_Handler();
 8000412:	f000 f864 	bl	80004de <Error_Handler>
 8000416:	e009      	b.n	800042c <main+0xe8>
			}
			else
			{
				printf("CAN Send Success: TxData[0] = 0x%02X\r\n", TxData[0]);
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <main+0xfc>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4619      	mov	r1, r3
 800041e:	480e      	ldr	r0, [pc, #56]	@ (8000458 <main+0x114>)
 8000420:	f002 f874 	bl	800250c <iprintf>
 8000424:	e002      	b.n	800042c <main+0xe8>
			}
		}
	}
	else
	{
		buttonPressed = 0; // Reset button pressed flag when button is released
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <main+0x108>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(10); // Debounce delay
 800042c:	200a      	movs	r0, #10
 800042e:	f000 fa6f 	bl	8000910 <HAL_Delay>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) // Button pressed (active high)
 8000432:	e7cc      	b.n	80003ce <main+0x8a>
 8000434:	080032d0 	.word	0x080032d0
 8000438:	20000084 	.word	0x20000084
 800043c:	200000ac 	.word	0x200000ac
 8000440:	200000c4 	.word	0x200000c4
 8000444:	080032d8 	.word	0x080032d8
 8000448:	40011000 	.word	0x40011000
 800044c:	200000d0 	.word	0x200000d0
 8000450:	200000cc 	.word	0x200000cc
 8000454:	080032ec 	.word	0x080032ec
 8000458:	080032fc 	.word	0x080032fc

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b090      	sub	sp, #64	@ 0x40
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0318 	add.w	r3, r7, #24
 8000466:	2228      	movs	r2, #40	@ 0x28
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f002 f996 	bl	800279c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800047e:	2302      	movs	r3, #2
 8000480:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000482:	2301      	movs	r3, #1
 8000484:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000486:	2310      	movs	r3, #16
 8000488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048a:	2302      	movs	r3, #2
 800048c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800048e:	2300      	movs	r3, #0
 8000490:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000492:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	4618      	mov	r0, r3
 800049e:	f001 f93f 	bl	8001720 <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004a8:	f000 f819 	bl	80004de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2101      	movs	r1, #1
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fbac 	bl	8001c24 <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004d2:	f000 f804 	bl	80004de <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3740      	adds	r7, #64	@ 0x40
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e2:	b672      	cpsid	i
}
 80004e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e6:	bf00      	nop
 80004e8:	e7fd      	b.n	80004e6 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	@ (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <NMI_Handler+0x4>

08000558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <MemManage_Handler+0x4>

08000568 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <UsageFault_Handler+0x4>

08000578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a0:	f000 f99a 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80005ae:	f000 fbe1 	bl	8000d74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000084 	.word	0x20000084

080005bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005c2:	f000 fbd7 	bl	8000d74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000084 	.word	0x20000084

080005d0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005d4:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <CAN1_RX1_IRQHandler+0x10>)
 80005d6:	f000 fbcd 	bl	8000d74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000084 	.word	0x20000084

080005e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	e00a      	b.n	800060c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005f6:	f3af 8000 	nop.w
 80005fa:	4601      	mov	r1, r0
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	60ba      	str	r2, [r7, #8]
 8000602:	b2ca      	uxtb	r2, r1
 8000604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbf0      	blt.n	80005f6 <_read+0x12>
  }

  return len;
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b086      	sub	sp, #24
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e009      	b.n	8000644 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fe71 	bl	8000320 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbf1      	blt.n	8000630 <_write+0x12>
  }
  return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_close>:

int _close(int file)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800067c:	605a      	str	r2, [r3, #4]
  return 0;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <_isatty>:

int _isatty(int file)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800069e:	b480      	push	{r7}
 80006a0:	b085      	sub	sp, #20
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	60f8      	str	r0, [r7, #12]
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
	...

080006b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c0:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <_sbrk+0x5c>)
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <_sbrk+0x60>)
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <_sbrk+0x64>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <_sbrk+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d207      	bcs.n	80006f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e8:	f002 f8a6 	bl	8002838 <__errno>
 80006ec:	4603      	mov	r3, r0
 80006ee:	220c      	movs	r2, #12
 80006f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	e009      	b.n	800070c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fe:	4b07      	ldr	r3, [pc, #28]	@ (800071c <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <_sbrk+0x64>)
 8000708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20005000 	.word	0x20005000
 8000718:	00000400 	.word	0x00000400
 800071c:	200000d4 	.word	0x200000d4
 8000720:	20000270 	.word	0x20000270

08000724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 fbea 	bl	8001f40 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f7ff feb4 	bl	80004de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000d8 	.word	0x200000d8
 8000780:	40004400 	.word	0x40004400

08000784 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <HAL_UART_MspInit+0x70>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d123      	bne.n	80007ec <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <HAL_UART_MspInit+0x74>)
 80007a6:	69db      	ldr	r3, [r3, #28]
 80007a8:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <HAL_UART_MspInit+0x74>)
 80007aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ae:	61d3      	str	r3, [r2, #28]
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <HAL_UART_MspInit+0x74>)
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <HAL_UART_MspInit+0x74>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <HAL_UART_MspInit+0x74>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <HAL_UART_MspInit+0x74>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d4:	230c      	movs	r3, #12
 80007d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <HAL_UART_MspInit+0x78>)
 80007e8:	f000 fdfe 	bl	80013e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40004400 	.word	0x40004400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800

08000800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000800:	f7ff ff90 	bl	8000724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000804:	480b      	ldr	r0, [pc, #44]	@ (8000834 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000806:	490c      	ldr	r1, [pc, #48]	@ (8000838 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000808:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <LoopFillZerobss+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a09      	ldr	r2, [pc, #36]	@ (8000840 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800081c:	4c09      	ldr	r4, [pc, #36]	@ (8000844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082a:	f002 f80b 	bl	8002844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082e:	f7ff fd89 	bl	8000344 <main>
  bx lr
 8000832:	4770      	bx	lr
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800083c:	0800338c 	.word	0x0800338c
  ldr r2, =_sbss
 8000840:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000844:	20000270 	.word	0x20000270

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <HAL_Init+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <HAL_Init+0x28>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 fd81 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	2000      	movs	r0, #0
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff fe40 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fd99 	bl	80013ce <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f000 fd61 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a03      	ldr	r2, [pc, #12]	@ (80008f8 <HAL_IncTick+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000120 	.word	0x20000120

080008fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	@ (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000120 	.word	0x20000120

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff fff0 	bl	80008fc <HAL_GetTick>
 800091c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000936:	bf00      	nop
 8000938:	f7ff ffe0 	bl	80008fc <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008

08000958 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d101      	bne.n	800096a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e0ed      	b.n	8000b46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fc1e 	bl	80001b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f042 0201 	orr.w	r2, r2, #1
 800098a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800098c:	f7ff ffb6 	bl	80008fc <HAL_GetTick>
 8000990:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000992:	e012      	b.n	80009ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000994:	f7ff ffb2 	bl	80008fc <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	2b0a      	cmp	r3, #10
 80009a0:	d90b      	bls.n	80009ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2205      	movs	r2, #5
 80009b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e0c5      	b.n	8000b46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0e5      	beq.n	8000994 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f022 0202 	bic.w	r2, r2, #2
 80009d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009d8:	f7ff ff90 	bl	80008fc <HAL_GetTick>
 80009dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009de:	e012      	b.n	8000a06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009e0:	f7ff ff8c 	bl	80008fc <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	2b0a      	cmp	r3, #10
 80009ec:	d90b      	bls.n	8000a06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2205      	movs	r2, #5
 80009fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e09f      	b.n	8000b46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1e5      	bne.n	80009e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7e1b      	ldrb	r3, [r3, #24]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d108      	bne.n	8000a2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e007      	b.n	8000a3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7e5b      	ldrb	r3, [r3, #25]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d108      	bne.n	8000a58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	e007      	b.n	8000a68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7e9b      	ldrb	r3, [r3, #26]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d108      	bne.n	8000a82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f042 0220 	orr.w	r2, r2, #32
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	e007      	b.n	8000a92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f022 0220 	bic.w	r2, r2, #32
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7edb      	ldrb	r3, [r3, #27]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d108      	bne.n	8000aac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f022 0210 	bic.w	r2, r2, #16
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e007      	b.n	8000abc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f042 0210 	orr.w	r2, r2, #16
 8000aba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7f1b      	ldrb	r3, [r3, #28]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d108      	bne.n	8000ad6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f042 0208 	orr.w	r2, r2, #8
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	e007      	b.n	8000ae6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f022 0208 	bic.w	r2, r2, #8
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7f5b      	ldrb	r3, [r3, #29]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d108      	bne.n	8000b00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f042 0204 	orr.w	r2, r2, #4
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e007      	b.n	8000b10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f022 0204 	bic.w	r2, r2, #4
 8000b0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	ea42 0103 	orr.w	r1, r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	1e5a      	subs	r2, r3, #1
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	430a      	orrs	r2, r1
 8000b34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d12e      	bne.n	8000bc0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2202      	movs	r2, #2
 8000b66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0201 	bic.w	r2, r2, #1
 8000b78:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b7a:	f7ff febf 	bl	80008fc <HAL_GetTick>
 8000b7e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b80:	e012      	b.n	8000ba8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b82:	f7ff febb 	bl	80008fc <HAL_GetTick>
 8000b86:	4602      	mov	r2, r0
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	2b0a      	cmp	r3, #10
 8000b8e:	d90b      	bls.n	8000ba8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b94:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2205      	movs	r2, #5
 8000ba0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e012      	b.n	8000bce <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1e5      	bne.n	8000b82 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e006      	b.n	8000bce <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
  }
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b089      	sub	sp, #36	@ 0x24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	60f8      	str	r0, [r7, #12]
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bea:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bf4:	7ffb      	ldrb	r3, [r7, #31]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d003      	beq.n	8000c02 <HAL_CAN_AddTxMessage+0x2c>
 8000bfa:	7ffb      	ldrb	r3, [r7, #31]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	f040 80ad 	bne.w	8000d5c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10a      	bne.n	8000c22 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d105      	bne.n	8000c22 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 8095 	beq.w	8000d4c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	0e1b      	lsrs	r3, r3, #24
 8000c26:	f003 0303 	and.w	r3, r3, #3
 8000c2a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	409a      	lsls	r2, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10d      	bne.n	8000c5a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c48:	68f9      	ldr	r1, [r7, #12]
 8000c4a:	6809      	ldr	r1, [r1, #0]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3318      	adds	r3, #24
 8000c52:	011b      	lsls	r3, r3, #4
 8000c54:	440b      	add	r3, r1
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e00f      	b.n	8000c7a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c64:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c6a:	68f9      	ldr	r1, [r7, #12]
 8000c6c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c6e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3318      	adds	r3, #24
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	440b      	add	r3, r1
 8000c78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6819      	ldr	r1, [r3, #0]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	691a      	ldr	r2, [r3, #16]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3318      	adds	r3, #24
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	440b      	add	r3, r1
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	7d1b      	ldrb	r3, [r3, #20]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d111      	bne.n	8000cba <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3318      	adds	r3, #24
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	4413      	add	r3, r2
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	6811      	ldr	r1, [r2, #0]
 8000caa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3318      	adds	r3, #24
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3307      	adds	r3, #7
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	061a      	lsls	r2, r3, #24
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3306      	adds	r3, #6
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	041b      	lsls	r3, r3, #16
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3305      	adds	r3, #5
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	3204      	adds	r2, #4
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	4610      	mov	r0, r2
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	6811      	ldr	r1, [r2, #0]
 8000ce2:	ea43 0200 	orr.w	r2, r3, r0
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	440b      	add	r3, r1
 8000cec:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000cf0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3303      	adds	r3, #3
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	061a      	lsls	r2, r3, #24
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3301      	adds	r3, #1
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	4610      	mov	r0, r2
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	6811      	ldr	r1, [r2, #0]
 8000d18:	ea43 0200 	orr.w	r2, r3, r0
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	440b      	add	r3, r1
 8000d22:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d26:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3318      	adds	r3, #24
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	4413      	add	r3, r2
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	6811      	ldr	r1, [r2, #0]
 8000d3a:	f043 0201 	orr.w	r2, r3, #1
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3318      	adds	r3, #24
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	440b      	add	r3, r1
 8000d46:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e00e      	b.n	8000d6a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d50:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e006      	b.n	8000d6a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
  }
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	@ 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d07c      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d023      	beq.n	8000e0c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f983 	bl	80010e2 <HAL_CAN_TxMailbox0CompleteCallback>
 8000ddc:	e016      	b.n	8000e0c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d004      	beq.n	8000df2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000df0:	e00c      	b.n	8000e0c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e04:	e002      	b.n	8000e0c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f986 	bl	8001118 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d024      	beq.n	8000e60 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f962 	bl	80010f4 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e30:	e016      	b.n	8000e60 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e44:	e00c      	b.n	8000e60 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d004      	beq.n	8000e5a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e58:	e002      	b.n	8000e60 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f965 	bl	800112a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d024      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f941 	bl	8001106 <HAL_CAN_TxMailbox2CompleteCallback>
 8000e84:	e016      	b.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e98:	e00c      	b.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d004      	beq.n	8000eae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eac:	e002      	b.n	8000eb4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f944 	bl	800113c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00c      	beq.n	8000ed8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d007      	beq.n	8000ed8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f933 	bl	8001160 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d009      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f91b 	bl	800114e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00c      	beq.n	8000f3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d007      	beq.n	8000f3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2210      	movs	r2, #16
 8000f3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00b      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2208      	movs	r2, #8
 8000f56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f913 	bl	8001184 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d009      	beq.n	8000f7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f8fb 	bl	8001172 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00b      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2210      	movs	r2, #16
 8000f96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f8fc 	bl	8001196 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f8f4 	bl	80011a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d07b      	beq.n	80010c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d072      	beq.n	80010ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d008      	beq.n	800100c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001012:	2b00      	cmp	r3, #0
 8001014:	d008      	beq.n	8001028 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800102e:	2b00      	cmp	r3, #0
 8001030:	d043      	beq.n	80010ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001038:	2b00      	cmp	r3, #0
 800103a:	d03e      	beq.n	80010ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001042:	2b60      	cmp	r3, #96	@ 0x60
 8001044:	d02b      	beq.n	800109e <HAL_CAN_IRQHandler+0x32a>
 8001046:	2b60      	cmp	r3, #96	@ 0x60
 8001048:	d82e      	bhi.n	80010a8 <HAL_CAN_IRQHandler+0x334>
 800104a:	2b50      	cmp	r3, #80	@ 0x50
 800104c:	d022      	beq.n	8001094 <HAL_CAN_IRQHandler+0x320>
 800104e:	2b50      	cmp	r3, #80	@ 0x50
 8001050:	d82a      	bhi.n	80010a8 <HAL_CAN_IRQHandler+0x334>
 8001052:	2b40      	cmp	r3, #64	@ 0x40
 8001054:	d019      	beq.n	800108a <HAL_CAN_IRQHandler+0x316>
 8001056:	2b40      	cmp	r3, #64	@ 0x40
 8001058:	d826      	bhi.n	80010a8 <HAL_CAN_IRQHandler+0x334>
 800105a:	2b30      	cmp	r3, #48	@ 0x30
 800105c:	d010      	beq.n	8001080 <HAL_CAN_IRQHandler+0x30c>
 800105e:	2b30      	cmp	r3, #48	@ 0x30
 8001060:	d822      	bhi.n	80010a8 <HAL_CAN_IRQHandler+0x334>
 8001062:	2b10      	cmp	r3, #16
 8001064:	d002      	beq.n	800106c <HAL_CAN_IRQHandler+0x2f8>
 8001066:	2b20      	cmp	r3, #32
 8001068:	d005      	beq.n	8001076 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800106a:	e01d      	b.n	80010a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800106c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106e:	f043 0308 	orr.w	r3, r3, #8
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001074:	e019      	b.n	80010aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800107e:	e014      	b.n	80010aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001088:	e00f      	b.n	80010aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001092:	e00a      	b.n	80010aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800109c:	e005      	b.n	80010aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010a6:	e000      	b.n	80010aa <HAL_CAN_IRQHandler+0x336>
            break;
 80010a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	699a      	ldr	r2, [r3, #24]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80010b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2204      	movs	r2, #4
 80010c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f870 	bl	80011ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	@ 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4906      	ldr	r1, [pc, #24]	@ (8001264 <__NVIC_EnableIRQ+0x34>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff90 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff2d 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff42 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff90 	bl	80012bc <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5f 	bl	8001268 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff35 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffa2 	bl	8001320 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b08b      	sub	sp, #44	@ 0x2c
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	e169      	b.n	80016d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013fc:	2201      	movs	r2, #1
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	429a      	cmp	r2, r3
 8001416:	f040 8158 	bne.w	80016ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a9a      	ldr	r2, [pc, #616]	@ (8001688 <HAL_GPIO_Init+0x2a0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d05e      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001424:	4a98      	ldr	r2, [pc, #608]	@ (8001688 <HAL_GPIO_Init+0x2a0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d875      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800142a:	4a98      	ldr	r2, [pc, #608]	@ (800168c <HAL_GPIO_Init+0x2a4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d058      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001430:	4a96      	ldr	r2, [pc, #600]	@ (800168c <HAL_GPIO_Init+0x2a4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d86f      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001436:	4a96      	ldr	r2, [pc, #600]	@ (8001690 <HAL_GPIO_Init+0x2a8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d052      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 800143c:	4a94      	ldr	r2, [pc, #592]	@ (8001690 <HAL_GPIO_Init+0x2a8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d869      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001442:	4a94      	ldr	r2, [pc, #592]	@ (8001694 <HAL_GPIO_Init+0x2ac>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d04c      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001448:	4a92      	ldr	r2, [pc, #584]	@ (8001694 <HAL_GPIO_Init+0x2ac>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d863      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800144e:	4a92      	ldr	r2, [pc, #584]	@ (8001698 <HAL_GPIO_Init+0x2b0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d046      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001454:	4a90      	ldr	r2, [pc, #576]	@ (8001698 <HAL_GPIO_Init+0x2b0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d85d      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d82a      	bhi.n	80014b4 <HAL_GPIO_Init+0xcc>
 800145e:	2b12      	cmp	r3, #18
 8001460:	d859      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001462:	a201      	add	r2, pc, #4	@ (adr r2, 8001468 <HAL_GPIO_Init+0x80>)
 8001464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001468:	080014e3 	.word	0x080014e3
 800146c:	080014bd 	.word	0x080014bd
 8001470:	080014cf 	.word	0x080014cf
 8001474:	08001511 	.word	0x08001511
 8001478:	08001517 	.word	0x08001517
 800147c:	08001517 	.word	0x08001517
 8001480:	08001517 	.word	0x08001517
 8001484:	08001517 	.word	0x08001517
 8001488:	08001517 	.word	0x08001517
 800148c:	08001517 	.word	0x08001517
 8001490:	08001517 	.word	0x08001517
 8001494:	08001517 	.word	0x08001517
 8001498:	08001517 	.word	0x08001517
 800149c:	08001517 	.word	0x08001517
 80014a0:	08001517 	.word	0x08001517
 80014a4:	08001517 	.word	0x08001517
 80014a8:	08001517 	.word	0x08001517
 80014ac:	080014c5 	.word	0x080014c5
 80014b0:	080014d9 	.word	0x080014d9
 80014b4:	4a79      	ldr	r2, [pc, #484]	@ (800169c <HAL_GPIO_Init+0x2b4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ba:	e02c      	b.n	8001516 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e029      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	3304      	adds	r3, #4
 80014ca:	623b      	str	r3, [r7, #32]
          break;
 80014cc:	e024      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	3308      	adds	r3, #8
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e01f      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	330c      	adds	r3, #12
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e01a      	b.n	8001518 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ea:	2304      	movs	r3, #4
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e013      	b.n	8001518 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	611a      	str	r2, [r3, #16]
          break;
 8001502:	e009      	b.n	8001518 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	615a      	str	r2, [r3, #20]
          break;
 800150e:	e003      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x130>
          break;
 8001516:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2bff      	cmp	r3, #255	@ 0xff
 800151c:	d801      	bhi.n	8001522 <HAL_GPIO_Init+0x13a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	e001      	b.n	8001526 <HAL_GPIO_Init+0x13e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3304      	adds	r3, #4
 8001526:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2bff      	cmp	r3, #255	@ 0xff
 800152c:	d802      	bhi.n	8001534 <HAL_GPIO_Init+0x14c>
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x152>
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	3b08      	subs	r3, #8
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	210f      	movs	r1, #15
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	401a      	ands	r2, r3
 800154c:	6a39      	ldr	r1, [r7, #32]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80b1 	beq.w	80016ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001568:	4b4d      	ldr	r3, [pc, #308]	@ (80016a0 <HAL_GPIO_Init+0x2b8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a4c      	ldr	r2, [pc, #304]	@ (80016a0 <HAL_GPIO_Init+0x2b8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <HAL_GPIO_Init+0x2b8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001580:	4a48      	ldr	r2, [pc, #288]	@ (80016a4 <HAL_GPIO_Init+0x2bc>)
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a40      	ldr	r2, [pc, #256]	@ (80016a8 <HAL_GPIO_Init+0x2c0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d013      	beq.n	80015d4 <HAL_GPIO_Init+0x1ec>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a3f      	ldr	r2, [pc, #252]	@ (80016ac <HAL_GPIO_Init+0x2c4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d00d      	beq.n	80015d0 <HAL_GPIO_Init+0x1e8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a3e      	ldr	r2, [pc, #248]	@ (80016b0 <HAL_GPIO_Init+0x2c8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d007      	beq.n	80015cc <HAL_GPIO_Init+0x1e4>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a3d      	ldr	r2, [pc, #244]	@ (80016b4 <HAL_GPIO_Init+0x2cc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d101      	bne.n	80015c8 <HAL_GPIO_Init+0x1e0>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e006      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015c8:	2304      	movs	r3, #4
 80015ca:	e004      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015d4:	2300      	movs	r3, #0
 80015d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d8:	f002 0203 	and.w	r2, r2, #3
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	4093      	lsls	r3, r2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e6:	492f      	ldr	r1, [pc, #188]	@ (80016a4 <HAL_GPIO_Init+0x2bc>)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001600:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	492c      	ldr	r1, [pc, #176]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800160e:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4928      	ldr	r1, [pc, #160]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001618:	4013      	ands	r3, r2
 800161a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	4922      	ldr	r1, [pc, #136]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	60cb      	str	r3, [r1, #12]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	491e      	ldr	r1, [pc, #120]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001650:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4918      	ldr	r1, [pc, #96]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800165e:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	4914      	ldr	r1, [pc, #80]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001668:	4013      	ands	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d021      	beq.n	80016bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	490e      	ldr	r1, [pc, #56]	@ (80016b8 <HAL_GPIO_Init+0x2d0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e021      	b.n	80016ca <HAL_GPIO_Init+0x2e2>
 8001686:	bf00      	nop
 8001688:	10320000 	.word	0x10320000
 800168c:	10310000 	.word	0x10310000
 8001690:	10220000 	.word	0x10220000
 8001694:	10210000 	.word	0x10210000
 8001698:	10120000 	.word	0x10120000
 800169c:	10110000 	.word	0x10110000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	40010c00 	.word	0x40010c00
 80016b0:	40011000 	.word	0x40011000
 80016b4:	40011400 	.word	0x40011400
 80016b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_GPIO_Init+0x304>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	4909      	ldr	r1, [pc, #36]	@ (80016ec <HAL_GPIO_Init+0x304>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	3301      	adds	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f ae8e 	bne.w	80013fc <HAL_GPIO_Init+0x14>
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	372c      	adds	r7, #44	@ 0x2c
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e001      	b.n	8001712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
	...

08001720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e272      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8087 	beq.w	800184e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001740:	4b92      	ldr	r3, [pc, #584]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b04      	cmp	r3, #4
 800174a:	d00c      	beq.n	8001766 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800174c:	4b8f      	ldr	r3, [pc, #572]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d112      	bne.n	800177e <HAL_RCC_OscConfig+0x5e>
 8001758:	4b8c      	ldr	r3, [pc, #560]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001764:	d10b      	bne.n	800177e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	4b89      	ldr	r3, [pc, #548]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d06c      	beq.n	800184c <HAL_RCC_OscConfig+0x12c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d168      	bne.n	800184c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e24c      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x76>
 8001788:	4b80      	ldr	r3, [pc, #512]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a7f      	ldr	r2, [pc, #508]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e02e      	b.n	80017f4 <HAL_RCC_OscConfig+0xd4>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x98>
 800179e:	4b7b      	ldr	r3, [pc, #492]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7a      	ldr	r2, [pc, #488]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b78      	ldr	r3, [pc, #480]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a77      	ldr	r2, [pc, #476]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0xd4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0xbc>
 80017c2:	4b72      	ldr	r3, [pc, #456]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a71      	ldr	r2, [pc, #452]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b6f      	ldr	r3, [pc, #444]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6e      	ldr	r2, [pc, #440]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xd4>
 80017dc:	4b6b      	ldr	r3, [pc, #428]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6a      	ldr	r2, [pc, #424]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b68      	ldr	r3, [pc, #416]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a67      	ldr	r2, [pc, #412]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f87e 	bl	80008fc <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff f87a 	bl	80008fc <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	@ 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e200      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b5d      	ldr	r3, [pc, #372]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xe4>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff f86a 	bl	80008fc <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff f866 	bl	80008fc <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	@ 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1ec      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	4b53      	ldr	r3, [pc, #332]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x10c>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d063      	beq.n	8001922 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800185a:	4b4c      	ldr	r3, [pc, #304]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001866:	4b49      	ldr	r3, [pc, #292]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	d11c      	bne.n	80018ac <HAL_RCC_OscConfig+0x18c>
 8001872:	4b46      	ldr	r3, [pc, #280]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	4b43      	ldr	r3, [pc, #268]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x176>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1c0      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b3d      	ldr	r3, [pc, #244]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4939      	ldr	r1, [pc, #228]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	e03a      	b.n	8001922 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	4b36      	ldr	r3, [pc, #216]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff f81f 	bl	80008fc <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff f81b 	bl	80008fc <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1a1      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4927      	ldr	r1, [pc, #156]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7fe fffe 	bl	80008fc <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001904:	f7fe fffa 	bl	80008fc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e180      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d03a      	beq.n	80019a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d019      	beq.n	800196a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <HAL_RCC_OscConfig+0x274>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7fe ffde 	bl	80008fc <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7fe ffda 	bl	80008fc <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e160      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <HAL_RCC_OscConfig+0x26c>)
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001962:	2001      	movs	r0, #1
 8001964:	f000 face 	bl	8001f04 <RCC_Delay>
 8001968:	e01c      	b.n	80019a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_RCC_OscConfig+0x274>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7fe ffc4 	bl	80008fc <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001976:	e00f      	b.n	8001998 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7fe ffc0 	bl	80008fc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d908      	bls.n	8001998 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e146      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	42420000 	.word	0x42420000
 8001994:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b92      	ldr	r3, [pc, #584]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e9      	bne.n	8001978 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a6 	beq.w	8001afe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b8b      	ldr	r3, [pc, #556]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10d      	bne.n	80019de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b88      	ldr	r3, [pc, #544]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a87      	ldr	r2, [pc, #540]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b85      	ldr	r3, [pc, #532]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	4b82      	ldr	r3, [pc, #520]	@ (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ea:	4b7f      	ldr	r3, [pc, #508]	@ (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a7e      	ldr	r2, [pc, #504]	@ (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f6:	f7fe ff81 	bl	80008fc <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7fe ff7d 	bl	80008fc <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b64      	cmp	r3, #100	@ 0x64
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e103      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b75      	ldr	r3, [pc, #468]	@ (8001be8 <HAL_RCC_OscConfig+0x4c8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x312>
 8001a24:	4b6f      	ldr	r3, [pc, #444]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a6e      	ldr	r2, [pc, #440]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	e02d      	b.n	8001a8e <HAL_RCC_OscConfig+0x36e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x334>
 8001a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a69      	ldr	r2, [pc, #420]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	4b67      	ldr	r3, [pc, #412]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4a66      	ldr	r2, [pc, #408]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6213      	str	r3, [r2, #32]
 8001a52:	e01c      	b.n	8001a8e <HAL_RCC_OscConfig+0x36e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d10c      	bne.n	8001a76 <HAL_RCC_OscConfig+0x356>
 8001a5c:	4b61      	ldr	r3, [pc, #388]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4a60      	ldr	r2, [pc, #384]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6213      	str	r3, [r2, #32]
 8001a68:	4b5e      	ldr	r3, [pc, #376]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	e00b      	b.n	8001a8e <HAL_RCC_OscConfig+0x36e>
 8001a76:	4b5b      	ldr	r3, [pc, #364]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6213      	str	r3, [r2, #32]
 8001a82:	4b58      	ldr	r3, [pc, #352]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a57      	ldr	r2, [pc, #348]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f023 0304 	bic.w	r3, r3, #4
 8001a8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d015      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7fe ff31 	bl	80008fc <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7fe ff2d 	bl	80008fc <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e0b1      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ee      	beq.n	8001a9e <HAL_RCC_OscConfig+0x37e>
 8001ac0:	e014      	b.n	8001aec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7fe ff1b 	bl	80008fc <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7fe ff17 	bl	80008fc <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e09b      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae0:	4b40      	ldr	r3, [pc, #256]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ee      	bne.n	8001aca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d105      	bne.n	8001afe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af2:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a3b      	ldr	r2, [pc, #236]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001afc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8087 	beq.w	8001c16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b08:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d061      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d146      	bne.n	8001baa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <HAL_RCC_OscConfig+0x4cc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7fe feeb 	bl	80008fc <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7fe fee7 	bl	80008fc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e06d      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b50:	d108      	bne.n	8001b64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b52:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	4921      	ldr	r1, [pc, #132]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b64:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a19      	ldr	r1, [r3, #32]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	430b      	orrs	r3, r1
 8001b76:	491b      	ldr	r1, [pc, #108]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_RCC_OscConfig+0x4cc>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7fe febb 	bl	80008fc <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7fe feb7 	bl	80008fc <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e03d      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x46a>
 8001ba8:	e035      	b.n	8001c16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <HAL_RCC_OscConfig+0x4cc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fea4 	bl	80008fc <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7fe fea0 	bl	80008fc <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e026      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x498>
 8001bd6:	e01e      	b.n	8001c16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e019      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40007000 	.word	0x40007000
 8001bec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_RCC_OscConfig+0x500>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0d0      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b6a      	ldr	r3, [pc, #424]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d910      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b67      	ldr	r3, [pc, #412]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0207 	bic.w	r2, r3, #7
 8001c4e:	4965      	ldr	r1, [pc, #404]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b63      	ldr	r3, [pc, #396]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b8      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c80:	4b59      	ldr	r3, [pc, #356]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a58      	ldr	r2, [pc, #352]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c98:	4b53      	ldr	r3, [pc, #332]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a52      	ldr	r2, [pc, #328]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ca2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b50      	ldr	r3, [pc, #320]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	494d      	ldr	r1, [pc, #308]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d040      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b47      	ldr	r3, [pc, #284]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e07f      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e073      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06b      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4936      	ldr	r1, [pc, #216]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7fe fdf2 	bl	80008fc <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7fe fdee 	bl	80008fc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e053      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b27      	ldr	r3, [pc, #156]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d210      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 0207 	bic.w	r2, r3, #7
 8001d5a:	4922      	ldr	r1, [pc, #136]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e032      	b.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4916      	ldr	r1, [pc, #88]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d9e:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	490e      	ldr	r1, [pc, #56]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db2:	f000 f821 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001db6:	4602      	mov	r2, r0
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	490a      	ldr	r1, [pc, #40]	@ (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	5ccb      	ldrb	r3, [r1, r3]
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	4a09      	ldr	r2, [pc, #36]	@ (8001df0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <HAL_RCC_ClockConfig+0x1d0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fd50 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08003324 	.word	0x08003324
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d002      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x30>
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x36>
 8001e26:	e027      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2a:	613b      	str	r3, [r7, #16]
      break;
 8001e2c:	e027      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	4a17      	ldr	r2, [pc, #92]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	0c5b      	lsrs	r3, r3, #17
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	4a11      	ldr	r2, [pc, #68]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5a:	fb03 f202 	mul.w	r2, r3, r2
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e004      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	613b      	str	r3, [r7, #16]
      break;
 8001e76:	e002      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7a:	613b      	str	r3, [r7, #16]
      break;
 8001e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7e:	693b      	ldr	r3, [r7, #16]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	007a1200 	.word	0x007a1200
 8001e94:	0800333c 	.word	0x0800333c
 8001e98:	0800334c 	.word	0x0800334c
 8001e9c:	003d0900 	.word	0x003d0900

08001ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	@ (8001eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb8:	f7ff fff2 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4903      	ldr	r1, [pc, #12]	@ (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08003334 	.word	0x08003334

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	0adb      	lsrs	r3, r3, #11
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4903      	ldr	r1, [pc, #12]	@ (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08003334 	.word	0x08003334

08001f04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <RCC_Delay+0x34>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <RCC_Delay+0x38>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f20:	bf00      	nop
  }
  while (Delay --);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	60fa      	str	r2, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f9      	bne.n	8001f20 <RCC_Delay+0x1c>
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	10624dd3 	.word	0x10624dd3

08001f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e042      	b.n	8001fd8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fc0c 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	@ 0x24
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f971 	bl	800226c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	@ 0x28
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d175      	bne.n	80020ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_UART_Transmit+0x2c>
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e06e      	b.n	80020ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2221      	movs	r2, #33	@ 0x21
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800201e:	f7fe fc6d 	bl	80008fc <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002038:	d108      	bne.n	800204c <HAL_UART_Transmit+0x6c>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d104      	bne.n	800204c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	e003      	b.n	8002054 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002054:	e02e      	b.n	80020b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	2180      	movs	r1, #128	@ 0x80
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f848 	bl	80020f6 <UART_WaitOnFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e03a      	b.n	80020ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800208c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	3302      	adds	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e007      	b.n	80020a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1cb      	bne.n	8002056 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2200      	movs	r2, #0
 80020c6:	2140      	movs	r1, #64	@ 0x40
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f814 	bl	80020f6 <UART_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e006      	b.n	80020ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002106:	e03b      	b.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210e:	d037      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002110:	f7fe fbf4 	bl	80008fc <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	6a3a      	ldr	r2, [r7, #32]
 800211c:	429a      	cmp	r2, r3
 800211e:	d302      	bcc.n	8002126 <UART_WaitOnFlagUntilTimeout+0x30>
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e03a      	b.n	80021a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d023      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b80      	cmp	r3, #128	@ 0x80
 800213c:	d020      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b40      	cmp	r3, #64	@ 0x40
 8002142:	d01d      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d116      	bne.n	8002180 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f81d 	bl	80021a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2208      	movs	r2, #8
 8002172:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e00f      	b.n	80021a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4013      	ands	r3, r2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d0b4      	beq.n	8002108 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b095      	sub	sp, #84	@ 0x54
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	330c      	adds	r3, #12
 80021b6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ba:	e853 3f00 	ldrex	r3, [r3]
 80021be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80021c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80021d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80021d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021d8:	e841 2300 	strex	r3, r2, [r1]
 80021dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80021de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e5      	bne.n	80021b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3314      	adds	r3, #20
 80021ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	e853 3f00 	ldrex	r3, [r3]
 80021f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3314      	adds	r3, #20
 8002202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002204:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002206:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800220a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800220c:	e841 2300 	strex	r3, r2, [r1]
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e5      	bne.n	80021e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	2b01      	cmp	r3, #1
 800221e:	d119      	bne.n	8002254 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	e853 3f00 	ldrex	r3, [r3]
 800222e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f023 0310 	bic.w	r3, r3, #16
 8002236:	647b      	str	r3, [r7, #68]	@ 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002240:	61ba      	str	r2, [r7, #24]
 8002242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002244:	6979      	ldr	r1, [r7, #20]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	e841 2300 	strex	r3, r2, [r1]
 800224c:	613b      	str	r3, [r7, #16]
   return(result);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e5      	bne.n	8002220 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002262:	bf00      	nop
 8002264:	3754      	adds	r7, #84	@ 0x54
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80022a6:	f023 030c 	bic.w	r3, r3, #12
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002380 <UART_SetConfig+0x114>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d103      	bne.n	80022dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022d4:	f7ff fe02 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	e002      	b.n	80022e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022dc:	f7ff fdea 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 80022e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	009a      	lsls	r2, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	4a22      	ldr	r2, [pc, #136]	@ (8002384 <UART_SetConfig+0x118>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	0119      	lsls	r1, r3, #4
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009a      	lsls	r2, r3, #2
 800230c:	441a      	add	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fbb2 f2f3 	udiv	r2, r2, r3
 8002318:	4b1a      	ldr	r3, [pc, #104]	@ (8002384 <UART_SetConfig+0x118>)
 800231a:	fba3 0302 	umull	r0, r3, r3, r2
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2064      	movs	r0, #100	@ 0x64
 8002322:	fb00 f303 	mul.w	r3, r0, r3
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	3332      	adds	r3, #50	@ 0x32
 800232c:	4a15      	ldr	r2, [pc, #84]	@ (8002384 <UART_SetConfig+0x118>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002338:	4419      	add	r1, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009a      	lsls	r2, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <UART_SetConfig+0x118>)
 8002352:	fba3 0302 	umull	r0, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2064      	movs	r0, #100	@ 0x64
 800235a:	fb00 f303 	mul.w	r3, r0, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	3332      	adds	r3, #50	@ 0x32
 8002364:	4a07      	ldr	r2, [pc, #28]	@ (8002384 <UART_SetConfig+0x118>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	f003 020f 	and.w	r2, r3, #15
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	440a      	add	r2, r1
 8002376:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40013800 	.word	0x40013800
 8002384:	51eb851f 	.word	0x51eb851f

08002388 <std>:
 8002388:	2300      	movs	r3, #0
 800238a:	b510      	push	{r4, lr}
 800238c:	4604      	mov	r4, r0
 800238e:	e9c0 3300 	strd	r3, r3, [r0]
 8002392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002396:	6083      	str	r3, [r0, #8]
 8002398:	8181      	strh	r1, [r0, #12]
 800239a:	6643      	str	r3, [r0, #100]	@ 0x64
 800239c:	81c2      	strh	r2, [r0, #14]
 800239e:	6183      	str	r3, [r0, #24]
 80023a0:	4619      	mov	r1, r3
 80023a2:	2208      	movs	r2, #8
 80023a4:	305c      	adds	r0, #92	@ 0x5c
 80023a6:	f000 f9f9 	bl	800279c <memset>
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <std+0x58>)
 80023ac:	6224      	str	r4, [r4, #32]
 80023ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <std+0x5c>)
 80023b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <std+0x60>)
 80023b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <std+0x64>)
 80023ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <std+0x68>)
 80023be:	429c      	cmp	r4, r3
 80023c0:	d006      	beq.n	80023d0 <std+0x48>
 80023c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80023c6:	4294      	cmp	r4, r2
 80023c8:	d002      	beq.n	80023d0 <std+0x48>
 80023ca:	33d0      	adds	r3, #208	@ 0xd0
 80023cc:	429c      	cmp	r4, r3
 80023ce:	d105      	bne.n	80023dc <std+0x54>
 80023d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80023d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023d8:	f000 ba58 	b.w	800288c <__retarget_lock_init_recursive>
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	bf00      	nop
 80023e0:	080025ed 	.word	0x080025ed
 80023e4:	0800260f 	.word	0x0800260f
 80023e8:	08002647 	.word	0x08002647
 80023ec:	0800266b 	.word	0x0800266b
 80023f0:	20000124 	.word	0x20000124

080023f4 <stdio_exit_handler>:
 80023f4:	4a02      	ldr	r2, [pc, #8]	@ (8002400 <stdio_exit_handler+0xc>)
 80023f6:	4903      	ldr	r1, [pc, #12]	@ (8002404 <stdio_exit_handler+0x10>)
 80023f8:	4803      	ldr	r0, [pc, #12]	@ (8002408 <stdio_exit_handler+0x14>)
 80023fa:	f000 b869 	b.w	80024d0 <_fwalk_sglue>
 80023fe:	bf00      	nop
 8002400:	2000000c 	.word	0x2000000c
 8002404:	08003125 	.word	0x08003125
 8002408:	2000001c 	.word	0x2000001c

0800240c <cleanup_stdio>:
 800240c:	6841      	ldr	r1, [r0, #4]
 800240e:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <cleanup_stdio+0x34>)
 8002410:	b510      	push	{r4, lr}
 8002412:	4299      	cmp	r1, r3
 8002414:	4604      	mov	r4, r0
 8002416:	d001      	beq.n	800241c <cleanup_stdio+0x10>
 8002418:	f000 fe84 	bl	8003124 <_fflush_r>
 800241c:	68a1      	ldr	r1, [r4, #8]
 800241e:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <cleanup_stdio+0x38>)
 8002420:	4299      	cmp	r1, r3
 8002422:	d002      	beq.n	800242a <cleanup_stdio+0x1e>
 8002424:	4620      	mov	r0, r4
 8002426:	f000 fe7d 	bl	8003124 <_fflush_r>
 800242a:	68e1      	ldr	r1, [r4, #12]
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <cleanup_stdio+0x3c>)
 800242e:	4299      	cmp	r1, r3
 8002430:	d004      	beq.n	800243c <cleanup_stdio+0x30>
 8002432:	4620      	mov	r0, r4
 8002434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002438:	f000 be74 	b.w	8003124 <_fflush_r>
 800243c:	bd10      	pop	{r4, pc}
 800243e:	bf00      	nop
 8002440:	20000124 	.word	0x20000124
 8002444:	2000018c 	.word	0x2000018c
 8002448:	200001f4 	.word	0x200001f4

0800244c <global_stdio_init.part.0>:
 800244c:	b510      	push	{r4, lr}
 800244e:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <global_stdio_init.part.0+0x30>)
 8002450:	4c0b      	ldr	r4, [pc, #44]	@ (8002480 <global_stdio_init.part.0+0x34>)
 8002452:	4a0c      	ldr	r2, [pc, #48]	@ (8002484 <global_stdio_init.part.0+0x38>)
 8002454:	4620      	mov	r0, r4
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	2104      	movs	r1, #4
 800245a:	2200      	movs	r2, #0
 800245c:	f7ff ff94 	bl	8002388 <std>
 8002460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002464:	2201      	movs	r2, #1
 8002466:	2109      	movs	r1, #9
 8002468:	f7ff ff8e 	bl	8002388 <std>
 800246c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002470:	2202      	movs	r2, #2
 8002472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002476:	2112      	movs	r1, #18
 8002478:	f7ff bf86 	b.w	8002388 <std>
 800247c:	2000025c 	.word	0x2000025c
 8002480:	20000124 	.word	0x20000124
 8002484:	080023f5 	.word	0x080023f5

08002488 <__sfp_lock_acquire>:
 8002488:	4801      	ldr	r0, [pc, #4]	@ (8002490 <__sfp_lock_acquire+0x8>)
 800248a:	f000 ba00 	b.w	800288e <__retarget_lock_acquire_recursive>
 800248e:	bf00      	nop
 8002490:	20000265 	.word	0x20000265

08002494 <__sfp_lock_release>:
 8002494:	4801      	ldr	r0, [pc, #4]	@ (800249c <__sfp_lock_release+0x8>)
 8002496:	f000 b9fb 	b.w	8002890 <__retarget_lock_release_recursive>
 800249a:	bf00      	nop
 800249c:	20000265 	.word	0x20000265

080024a0 <__sinit>:
 80024a0:	b510      	push	{r4, lr}
 80024a2:	4604      	mov	r4, r0
 80024a4:	f7ff fff0 	bl	8002488 <__sfp_lock_acquire>
 80024a8:	6a23      	ldr	r3, [r4, #32]
 80024aa:	b11b      	cbz	r3, 80024b4 <__sinit+0x14>
 80024ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024b0:	f7ff bff0 	b.w	8002494 <__sfp_lock_release>
 80024b4:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <__sinit+0x28>)
 80024b6:	6223      	str	r3, [r4, #32]
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <__sinit+0x2c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f5      	bne.n	80024ac <__sinit+0xc>
 80024c0:	f7ff ffc4 	bl	800244c <global_stdio_init.part.0>
 80024c4:	e7f2      	b.n	80024ac <__sinit+0xc>
 80024c6:	bf00      	nop
 80024c8:	0800240d 	.word	0x0800240d
 80024cc:	2000025c 	.word	0x2000025c

080024d0 <_fwalk_sglue>:
 80024d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024d4:	4607      	mov	r7, r0
 80024d6:	4688      	mov	r8, r1
 80024d8:	4614      	mov	r4, r2
 80024da:	2600      	movs	r6, #0
 80024dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024e0:	f1b9 0901 	subs.w	r9, r9, #1
 80024e4:	d505      	bpl.n	80024f2 <_fwalk_sglue+0x22>
 80024e6:	6824      	ldr	r4, [r4, #0]
 80024e8:	2c00      	cmp	r4, #0
 80024ea:	d1f7      	bne.n	80024dc <_fwalk_sglue+0xc>
 80024ec:	4630      	mov	r0, r6
 80024ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024f2:	89ab      	ldrh	r3, [r5, #12]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d907      	bls.n	8002508 <_fwalk_sglue+0x38>
 80024f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024fc:	3301      	adds	r3, #1
 80024fe:	d003      	beq.n	8002508 <_fwalk_sglue+0x38>
 8002500:	4629      	mov	r1, r5
 8002502:	4638      	mov	r0, r7
 8002504:	47c0      	blx	r8
 8002506:	4306      	orrs	r6, r0
 8002508:	3568      	adds	r5, #104	@ 0x68
 800250a:	e7e9      	b.n	80024e0 <_fwalk_sglue+0x10>

0800250c <iprintf>:
 800250c:	b40f      	push	{r0, r1, r2, r3}
 800250e:	b507      	push	{r0, r1, r2, lr}
 8002510:	4906      	ldr	r1, [pc, #24]	@ (800252c <iprintf+0x20>)
 8002512:	ab04      	add	r3, sp, #16
 8002514:	6808      	ldr	r0, [r1, #0]
 8002516:	f853 2b04 	ldr.w	r2, [r3], #4
 800251a:	6881      	ldr	r1, [r0, #8]
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	f000 fad7 	bl	8002ad0 <_vfiprintf_r>
 8002522:	b003      	add	sp, #12
 8002524:	f85d eb04 	ldr.w	lr, [sp], #4
 8002528:	b004      	add	sp, #16
 800252a:	4770      	bx	lr
 800252c:	20000018 	.word	0x20000018

08002530 <_puts_r>:
 8002530:	6a03      	ldr	r3, [r0, #32]
 8002532:	b570      	push	{r4, r5, r6, lr}
 8002534:	4605      	mov	r5, r0
 8002536:	460e      	mov	r6, r1
 8002538:	6884      	ldr	r4, [r0, #8]
 800253a:	b90b      	cbnz	r3, 8002540 <_puts_r+0x10>
 800253c:	f7ff ffb0 	bl	80024a0 <__sinit>
 8002540:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002542:	07db      	lsls	r3, r3, #31
 8002544:	d405      	bmi.n	8002552 <_puts_r+0x22>
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	0598      	lsls	r0, r3, #22
 800254a:	d402      	bmi.n	8002552 <_puts_r+0x22>
 800254c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800254e:	f000 f99e 	bl	800288e <__retarget_lock_acquire_recursive>
 8002552:	89a3      	ldrh	r3, [r4, #12]
 8002554:	0719      	lsls	r1, r3, #28
 8002556:	d502      	bpl.n	800255e <_puts_r+0x2e>
 8002558:	6923      	ldr	r3, [r4, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d135      	bne.n	80025ca <_puts_r+0x9a>
 800255e:	4621      	mov	r1, r4
 8002560:	4628      	mov	r0, r5
 8002562:	f000 f8c5 	bl	80026f0 <__swsetup_r>
 8002566:	b380      	cbz	r0, 80025ca <_puts_r+0x9a>
 8002568:	f04f 35ff 	mov.w	r5, #4294967295
 800256c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800256e:	07da      	lsls	r2, r3, #31
 8002570:	d405      	bmi.n	800257e <_puts_r+0x4e>
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	059b      	lsls	r3, r3, #22
 8002576:	d402      	bmi.n	800257e <_puts_r+0x4e>
 8002578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800257a:	f000 f989 	bl	8002890 <__retarget_lock_release_recursive>
 800257e:	4628      	mov	r0, r5
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	2b00      	cmp	r3, #0
 8002584:	da04      	bge.n	8002590 <_puts_r+0x60>
 8002586:	69a2      	ldr	r2, [r4, #24]
 8002588:	429a      	cmp	r2, r3
 800258a:	dc17      	bgt.n	80025bc <_puts_r+0x8c>
 800258c:	290a      	cmp	r1, #10
 800258e:	d015      	beq.n	80025bc <_puts_r+0x8c>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	6022      	str	r2, [r4, #0]
 8002596:	7019      	strb	r1, [r3, #0]
 8002598:	68a3      	ldr	r3, [r4, #8]
 800259a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800259e:	3b01      	subs	r3, #1
 80025a0:	60a3      	str	r3, [r4, #8]
 80025a2:	2900      	cmp	r1, #0
 80025a4:	d1ed      	bne.n	8002582 <_puts_r+0x52>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	da11      	bge.n	80025ce <_puts_r+0x9e>
 80025aa:	4622      	mov	r2, r4
 80025ac:	210a      	movs	r1, #10
 80025ae:	4628      	mov	r0, r5
 80025b0:	f000 f85f 	bl	8002672 <__swbuf_r>
 80025b4:	3001      	adds	r0, #1
 80025b6:	d0d7      	beq.n	8002568 <_puts_r+0x38>
 80025b8:	250a      	movs	r5, #10
 80025ba:	e7d7      	b.n	800256c <_puts_r+0x3c>
 80025bc:	4622      	mov	r2, r4
 80025be:	4628      	mov	r0, r5
 80025c0:	f000 f857 	bl	8002672 <__swbuf_r>
 80025c4:	3001      	adds	r0, #1
 80025c6:	d1e7      	bne.n	8002598 <_puts_r+0x68>
 80025c8:	e7ce      	b.n	8002568 <_puts_r+0x38>
 80025ca:	3e01      	subs	r6, #1
 80025cc:	e7e4      	b.n	8002598 <_puts_r+0x68>
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	6022      	str	r2, [r4, #0]
 80025d4:	220a      	movs	r2, #10
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e7ee      	b.n	80025b8 <_puts_r+0x88>
	...

080025dc <puts>:
 80025dc:	4b02      	ldr	r3, [pc, #8]	@ (80025e8 <puts+0xc>)
 80025de:	4601      	mov	r1, r0
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	f7ff bfa5 	b.w	8002530 <_puts_r>
 80025e6:	bf00      	nop
 80025e8:	20000018 	.word	0x20000018

080025ec <__sread>:
 80025ec:	b510      	push	{r4, lr}
 80025ee:	460c      	mov	r4, r1
 80025f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025f4:	f000 f8fc 	bl	80027f0 <_read_r>
 80025f8:	2800      	cmp	r0, #0
 80025fa:	bfab      	itete	ge
 80025fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80025fe:	89a3      	ldrhlt	r3, [r4, #12]
 8002600:	181b      	addge	r3, r3, r0
 8002602:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002606:	bfac      	ite	ge
 8002608:	6563      	strge	r3, [r4, #84]	@ 0x54
 800260a:	81a3      	strhlt	r3, [r4, #12]
 800260c:	bd10      	pop	{r4, pc}

0800260e <__swrite>:
 800260e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002612:	461f      	mov	r7, r3
 8002614:	898b      	ldrh	r3, [r1, #12]
 8002616:	4605      	mov	r5, r0
 8002618:	05db      	lsls	r3, r3, #23
 800261a:	460c      	mov	r4, r1
 800261c:	4616      	mov	r6, r2
 800261e:	d505      	bpl.n	800262c <__swrite+0x1e>
 8002620:	2302      	movs	r3, #2
 8002622:	2200      	movs	r2, #0
 8002624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002628:	f000 f8d0 	bl	80027cc <_lseek_r>
 800262c:	89a3      	ldrh	r3, [r4, #12]
 800262e:	4632      	mov	r2, r6
 8002630:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002634:	81a3      	strh	r3, [r4, #12]
 8002636:	4628      	mov	r0, r5
 8002638:	463b      	mov	r3, r7
 800263a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800263e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002642:	f000 b8e7 	b.w	8002814 <_write_r>

08002646 <__sseek>:
 8002646:	b510      	push	{r4, lr}
 8002648:	460c      	mov	r4, r1
 800264a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800264e:	f000 f8bd 	bl	80027cc <_lseek_r>
 8002652:	1c43      	adds	r3, r0, #1
 8002654:	89a3      	ldrh	r3, [r4, #12]
 8002656:	bf15      	itete	ne
 8002658:	6560      	strne	r0, [r4, #84]	@ 0x54
 800265a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800265e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002662:	81a3      	strheq	r3, [r4, #12]
 8002664:	bf18      	it	ne
 8002666:	81a3      	strhne	r3, [r4, #12]
 8002668:	bd10      	pop	{r4, pc}

0800266a <__sclose>:
 800266a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800266e:	f000 b89d 	b.w	80027ac <_close_r>

08002672 <__swbuf_r>:
 8002672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002674:	460e      	mov	r6, r1
 8002676:	4614      	mov	r4, r2
 8002678:	4605      	mov	r5, r0
 800267a:	b118      	cbz	r0, 8002684 <__swbuf_r+0x12>
 800267c:	6a03      	ldr	r3, [r0, #32]
 800267e:	b90b      	cbnz	r3, 8002684 <__swbuf_r+0x12>
 8002680:	f7ff ff0e 	bl	80024a0 <__sinit>
 8002684:	69a3      	ldr	r3, [r4, #24]
 8002686:	60a3      	str	r3, [r4, #8]
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	071a      	lsls	r2, r3, #28
 800268c:	d501      	bpl.n	8002692 <__swbuf_r+0x20>
 800268e:	6923      	ldr	r3, [r4, #16]
 8002690:	b943      	cbnz	r3, 80026a4 <__swbuf_r+0x32>
 8002692:	4621      	mov	r1, r4
 8002694:	4628      	mov	r0, r5
 8002696:	f000 f82b 	bl	80026f0 <__swsetup_r>
 800269a:	b118      	cbz	r0, 80026a4 <__swbuf_r+0x32>
 800269c:	f04f 37ff 	mov.w	r7, #4294967295
 80026a0:	4638      	mov	r0, r7
 80026a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	6922      	ldr	r2, [r4, #16]
 80026a8:	b2f6      	uxtb	r6, r6
 80026aa:	1a98      	subs	r0, r3, r2
 80026ac:	6963      	ldr	r3, [r4, #20]
 80026ae:	4637      	mov	r7, r6
 80026b0:	4283      	cmp	r3, r0
 80026b2:	dc05      	bgt.n	80026c0 <__swbuf_r+0x4e>
 80026b4:	4621      	mov	r1, r4
 80026b6:	4628      	mov	r0, r5
 80026b8:	f000 fd34 	bl	8003124 <_fflush_r>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d1ed      	bne.n	800269c <__swbuf_r+0x2a>
 80026c0:	68a3      	ldr	r3, [r4, #8]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60a3      	str	r3, [r4, #8]
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	6022      	str	r2, [r4, #0]
 80026cc:	701e      	strb	r6, [r3, #0]
 80026ce:	6962      	ldr	r2, [r4, #20]
 80026d0:	1c43      	adds	r3, r0, #1
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d004      	beq.n	80026e0 <__swbuf_r+0x6e>
 80026d6:	89a3      	ldrh	r3, [r4, #12]
 80026d8:	07db      	lsls	r3, r3, #31
 80026da:	d5e1      	bpl.n	80026a0 <__swbuf_r+0x2e>
 80026dc:	2e0a      	cmp	r6, #10
 80026de:	d1df      	bne.n	80026a0 <__swbuf_r+0x2e>
 80026e0:	4621      	mov	r1, r4
 80026e2:	4628      	mov	r0, r5
 80026e4:	f000 fd1e 	bl	8003124 <_fflush_r>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d0d9      	beq.n	80026a0 <__swbuf_r+0x2e>
 80026ec:	e7d6      	b.n	800269c <__swbuf_r+0x2a>
	...

080026f0 <__swsetup_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4b29      	ldr	r3, [pc, #164]	@ (8002798 <__swsetup_r+0xa8>)
 80026f4:	4605      	mov	r5, r0
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	460c      	mov	r4, r1
 80026fa:	b118      	cbz	r0, 8002704 <__swsetup_r+0x14>
 80026fc:	6a03      	ldr	r3, [r0, #32]
 80026fe:	b90b      	cbnz	r3, 8002704 <__swsetup_r+0x14>
 8002700:	f7ff fece 	bl	80024a0 <__sinit>
 8002704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002708:	0719      	lsls	r1, r3, #28
 800270a:	d422      	bmi.n	8002752 <__swsetup_r+0x62>
 800270c:	06da      	lsls	r2, r3, #27
 800270e:	d407      	bmi.n	8002720 <__swsetup_r+0x30>
 8002710:	2209      	movs	r2, #9
 8002712:	602a      	str	r2, [r5, #0]
 8002714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	81a3      	strh	r3, [r4, #12]
 800271e:	e033      	b.n	8002788 <__swsetup_r+0x98>
 8002720:	0758      	lsls	r0, r3, #29
 8002722:	d512      	bpl.n	800274a <__swsetup_r+0x5a>
 8002724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002726:	b141      	cbz	r1, 800273a <__swsetup_r+0x4a>
 8002728:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800272c:	4299      	cmp	r1, r3
 800272e:	d002      	beq.n	8002736 <__swsetup_r+0x46>
 8002730:	4628      	mov	r0, r5
 8002732:	f000 f8af 	bl	8002894 <_free_r>
 8002736:	2300      	movs	r3, #0
 8002738:	6363      	str	r3, [r4, #52]	@ 0x34
 800273a:	89a3      	ldrh	r3, [r4, #12]
 800273c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002740:	81a3      	strh	r3, [r4, #12]
 8002742:	2300      	movs	r3, #0
 8002744:	6063      	str	r3, [r4, #4]
 8002746:	6923      	ldr	r3, [r4, #16]
 8002748:	6023      	str	r3, [r4, #0]
 800274a:	89a3      	ldrh	r3, [r4, #12]
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	81a3      	strh	r3, [r4, #12]
 8002752:	6923      	ldr	r3, [r4, #16]
 8002754:	b94b      	cbnz	r3, 800276a <__swsetup_r+0x7a>
 8002756:	89a3      	ldrh	r3, [r4, #12]
 8002758:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800275c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002760:	d003      	beq.n	800276a <__swsetup_r+0x7a>
 8002762:	4621      	mov	r1, r4
 8002764:	4628      	mov	r0, r5
 8002766:	f000 fd2a 	bl	80031be <__smakebuf_r>
 800276a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800276e:	f013 0201 	ands.w	r2, r3, #1
 8002772:	d00a      	beq.n	800278a <__swsetup_r+0x9a>
 8002774:	2200      	movs	r2, #0
 8002776:	60a2      	str	r2, [r4, #8]
 8002778:	6962      	ldr	r2, [r4, #20]
 800277a:	4252      	negs	r2, r2
 800277c:	61a2      	str	r2, [r4, #24]
 800277e:	6922      	ldr	r2, [r4, #16]
 8002780:	b942      	cbnz	r2, 8002794 <__swsetup_r+0xa4>
 8002782:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002786:	d1c5      	bne.n	8002714 <__swsetup_r+0x24>
 8002788:	bd38      	pop	{r3, r4, r5, pc}
 800278a:	0799      	lsls	r1, r3, #30
 800278c:	bf58      	it	pl
 800278e:	6962      	ldrpl	r2, [r4, #20]
 8002790:	60a2      	str	r2, [r4, #8]
 8002792:	e7f4      	b.n	800277e <__swsetup_r+0x8e>
 8002794:	2000      	movs	r0, #0
 8002796:	e7f7      	b.n	8002788 <__swsetup_r+0x98>
 8002798:	20000018 	.word	0x20000018

0800279c <memset>:
 800279c:	4603      	mov	r3, r0
 800279e:	4402      	add	r2, r0
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d100      	bne.n	80027a6 <memset+0xa>
 80027a4:	4770      	bx	lr
 80027a6:	f803 1b01 	strb.w	r1, [r3], #1
 80027aa:	e7f9      	b.n	80027a0 <memset+0x4>

080027ac <_close_r>:
 80027ac:	b538      	push	{r3, r4, r5, lr}
 80027ae:	2300      	movs	r3, #0
 80027b0:	4d05      	ldr	r5, [pc, #20]	@ (80027c8 <_close_r+0x1c>)
 80027b2:	4604      	mov	r4, r0
 80027b4:	4608      	mov	r0, r1
 80027b6:	602b      	str	r3, [r5, #0]
 80027b8:	f7fd ff4d 	bl	8000656 <_close>
 80027bc:	1c43      	adds	r3, r0, #1
 80027be:	d102      	bne.n	80027c6 <_close_r+0x1a>
 80027c0:	682b      	ldr	r3, [r5, #0]
 80027c2:	b103      	cbz	r3, 80027c6 <_close_r+0x1a>
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	bd38      	pop	{r3, r4, r5, pc}
 80027c8:	20000260 	.word	0x20000260

080027cc <_lseek_r>:
 80027cc:	b538      	push	{r3, r4, r5, lr}
 80027ce:	4604      	mov	r4, r0
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	2200      	movs	r2, #0
 80027d6:	4d05      	ldr	r5, [pc, #20]	@ (80027ec <_lseek_r+0x20>)
 80027d8:	602a      	str	r2, [r5, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	f7fd ff5f 	bl	800069e <_lseek>
 80027e0:	1c43      	adds	r3, r0, #1
 80027e2:	d102      	bne.n	80027ea <_lseek_r+0x1e>
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	b103      	cbz	r3, 80027ea <_lseek_r+0x1e>
 80027e8:	6023      	str	r3, [r4, #0]
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
 80027ec:	20000260 	.word	0x20000260

080027f0 <_read_r>:
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	4604      	mov	r4, r0
 80027f4:	4608      	mov	r0, r1
 80027f6:	4611      	mov	r1, r2
 80027f8:	2200      	movs	r2, #0
 80027fa:	4d05      	ldr	r5, [pc, #20]	@ (8002810 <_read_r+0x20>)
 80027fc:	602a      	str	r2, [r5, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	f7fd fef0 	bl	80005e4 <_read>
 8002804:	1c43      	adds	r3, r0, #1
 8002806:	d102      	bne.n	800280e <_read_r+0x1e>
 8002808:	682b      	ldr	r3, [r5, #0]
 800280a:	b103      	cbz	r3, 800280e <_read_r+0x1e>
 800280c:	6023      	str	r3, [r4, #0]
 800280e:	bd38      	pop	{r3, r4, r5, pc}
 8002810:	20000260 	.word	0x20000260

08002814 <_write_r>:
 8002814:	b538      	push	{r3, r4, r5, lr}
 8002816:	4604      	mov	r4, r0
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	2200      	movs	r2, #0
 800281e:	4d05      	ldr	r5, [pc, #20]	@ (8002834 <_write_r+0x20>)
 8002820:	602a      	str	r2, [r5, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	f7fd fefb 	bl	800061e <_write>
 8002828:	1c43      	adds	r3, r0, #1
 800282a:	d102      	bne.n	8002832 <_write_r+0x1e>
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	b103      	cbz	r3, 8002832 <_write_r+0x1e>
 8002830:	6023      	str	r3, [r4, #0]
 8002832:	bd38      	pop	{r3, r4, r5, pc}
 8002834:	20000260 	.word	0x20000260

08002838 <__errno>:
 8002838:	4b01      	ldr	r3, [pc, #4]	@ (8002840 <__errno+0x8>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000018 	.word	0x20000018

08002844 <__libc_init_array>:
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	2600      	movs	r6, #0
 8002848:	4d0c      	ldr	r5, [pc, #48]	@ (800287c <__libc_init_array+0x38>)
 800284a:	4c0d      	ldr	r4, [pc, #52]	@ (8002880 <__libc_init_array+0x3c>)
 800284c:	1b64      	subs	r4, r4, r5
 800284e:	10a4      	asrs	r4, r4, #2
 8002850:	42a6      	cmp	r6, r4
 8002852:	d109      	bne.n	8002868 <__libc_init_array+0x24>
 8002854:	f000 fd30 	bl	80032b8 <_init>
 8002858:	2600      	movs	r6, #0
 800285a:	4d0a      	ldr	r5, [pc, #40]	@ (8002884 <__libc_init_array+0x40>)
 800285c:	4c0a      	ldr	r4, [pc, #40]	@ (8002888 <__libc_init_array+0x44>)
 800285e:	1b64      	subs	r4, r4, r5
 8002860:	10a4      	asrs	r4, r4, #2
 8002862:	42a6      	cmp	r6, r4
 8002864:	d105      	bne.n	8002872 <__libc_init_array+0x2e>
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	f855 3b04 	ldr.w	r3, [r5], #4
 800286c:	4798      	blx	r3
 800286e:	3601      	adds	r6, #1
 8002870:	e7ee      	b.n	8002850 <__libc_init_array+0xc>
 8002872:	f855 3b04 	ldr.w	r3, [r5], #4
 8002876:	4798      	blx	r3
 8002878:	3601      	adds	r6, #1
 800287a:	e7f2      	b.n	8002862 <__libc_init_array+0x1e>
 800287c:	08003384 	.word	0x08003384
 8002880:	08003384 	.word	0x08003384
 8002884:	08003384 	.word	0x08003384
 8002888:	08003388 	.word	0x08003388

0800288c <__retarget_lock_init_recursive>:
 800288c:	4770      	bx	lr

0800288e <__retarget_lock_acquire_recursive>:
 800288e:	4770      	bx	lr

08002890 <__retarget_lock_release_recursive>:
 8002890:	4770      	bx	lr
	...

08002894 <_free_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	4605      	mov	r5, r0
 8002898:	2900      	cmp	r1, #0
 800289a:	d040      	beq.n	800291e <_free_r+0x8a>
 800289c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028a0:	1f0c      	subs	r4, r1, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bfb8      	it	lt
 80028a6:	18e4      	addlt	r4, r4, r3
 80028a8:	f000 f8de 	bl	8002a68 <__malloc_lock>
 80028ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002920 <_free_r+0x8c>)
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	b933      	cbnz	r3, 80028c0 <_free_r+0x2c>
 80028b2:	6063      	str	r3, [r4, #4]
 80028b4:	6014      	str	r4, [r2, #0]
 80028b6:	4628      	mov	r0, r5
 80028b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028bc:	f000 b8da 	b.w	8002a74 <__malloc_unlock>
 80028c0:	42a3      	cmp	r3, r4
 80028c2:	d908      	bls.n	80028d6 <_free_r+0x42>
 80028c4:	6820      	ldr	r0, [r4, #0]
 80028c6:	1821      	adds	r1, r4, r0
 80028c8:	428b      	cmp	r3, r1
 80028ca:	bf01      	itttt	eq
 80028cc:	6819      	ldreq	r1, [r3, #0]
 80028ce:	685b      	ldreq	r3, [r3, #4]
 80028d0:	1809      	addeq	r1, r1, r0
 80028d2:	6021      	streq	r1, [r4, #0]
 80028d4:	e7ed      	b.n	80028b2 <_free_r+0x1e>
 80028d6:	461a      	mov	r2, r3
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	b10b      	cbz	r3, 80028e0 <_free_r+0x4c>
 80028dc:	42a3      	cmp	r3, r4
 80028de:	d9fa      	bls.n	80028d6 <_free_r+0x42>
 80028e0:	6811      	ldr	r1, [r2, #0]
 80028e2:	1850      	adds	r0, r2, r1
 80028e4:	42a0      	cmp	r0, r4
 80028e6:	d10b      	bne.n	8002900 <_free_r+0x6c>
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	4401      	add	r1, r0
 80028ec:	1850      	adds	r0, r2, r1
 80028ee:	4283      	cmp	r3, r0
 80028f0:	6011      	str	r1, [r2, #0]
 80028f2:	d1e0      	bne.n	80028b6 <_free_r+0x22>
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4408      	add	r0, r1
 80028fa:	6010      	str	r0, [r2, #0]
 80028fc:	6053      	str	r3, [r2, #4]
 80028fe:	e7da      	b.n	80028b6 <_free_r+0x22>
 8002900:	d902      	bls.n	8002908 <_free_r+0x74>
 8002902:	230c      	movs	r3, #12
 8002904:	602b      	str	r3, [r5, #0]
 8002906:	e7d6      	b.n	80028b6 <_free_r+0x22>
 8002908:	6820      	ldr	r0, [r4, #0]
 800290a:	1821      	adds	r1, r4, r0
 800290c:	428b      	cmp	r3, r1
 800290e:	bf01      	itttt	eq
 8002910:	6819      	ldreq	r1, [r3, #0]
 8002912:	685b      	ldreq	r3, [r3, #4]
 8002914:	1809      	addeq	r1, r1, r0
 8002916:	6021      	streq	r1, [r4, #0]
 8002918:	6063      	str	r3, [r4, #4]
 800291a:	6054      	str	r4, [r2, #4]
 800291c:	e7cb      	b.n	80028b6 <_free_r+0x22>
 800291e:	bd38      	pop	{r3, r4, r5, pc}
 8002920:	2000026c 	.word	0x2000026c

08002924 <sbrk_aligned>:
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	4e0f      	ldr	r6, [pc, #60]	@ (8002964 <sbrk_aligned+0x40>)
 8002928:	460c      	mov	r4, r1
 800292a:	6831      	ldr	r1, [r6, #0]
 800292c:	4605      	mov	r5, r0
 800292e:	b911      	cbnz	r1, 8002936 <sbrk_aligned+0x12>
 8002930:	f000 fca4 	bl	800327c <_sbrk_r>
 8002934:	6030      	str	r0, [r6, #0]
 8002936:	4621      	mov	r1, r4
 8002938:	4628      	mov	r0, r5
 800293a:	f000 fc9f 	bl	800327c <_sbrk_r>
 800293e:	1c43      	adds	r3, r0, #1
 8002940:	d103      	bne.n	800294a <sbrk_aligned+0x26>
 8002942:	f04f 34ff 	mov.w	r4, #4294967295
 8002946:	4620      	mov	r0, r4
 8002948:	bd70      	pop	{r4, r5, r6, pc}
 800294a:	1cc4      	adds	r4, r0, #3
 800294c:	f024 0403 	bic.w	r4, r4, #3
 8002950:	42a0      	cmp	r0, r4
 8002952:	d0f8      	beq.n	8002946 <sbrk_aligned+0x22>
 8002954:	1a21      	subs	r1, r4, r0
 8002956:	4628      	mov	r0, r5
 8002958:	f000 fc90 	bl	800327c <_sbrk_r>
 800295c:	3001      	adds	r0, #1
 800295e:	d1f2      	bne.n	8002946 <sbrk_aligned+0x22>
 8002960:	e7ef      	b.n	8002942 <sbrk_aligned+0x1e>
 8002962:	bf00      	nop
 8002964:	20000268 	.word	0x20000268

08002968 <_malloc_r>:
 8002968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800296c:	1ccd      	adds	r5, r1, #3
 800296e:	f025 0503 	bic.w	r5, r5, #3
 8002972:	3508      	adds	r5, #8
 8002974:	2d0c      	cmp	r5, #12
 8002976:	bf38      	it	cc
 8002978:	250c      	movcc	r5, #12
 800297a:	2d00      	cmp	r5, #0
 800297c:	4606      	mov	r6, r0
 800297e:	db01      	blt.n	8002984 <_malloc_r+0x1c>
 8002980:	42a9      	cmp	r1, r5
 8002982:	d904      	bls.n	800298e <_malloc_r+0x26>
 8002984:	230c      	movs	r3, #12
 8002986:	6033      	str	r3, [r6, #0]
 8002988:	2000      	movs	r0, #0
 800298a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800298e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a64 <_malloc_r+0xfc>
 8002992:	f000 f869 	bl	8002a68 <__malloc_lock>
 8002996:	f8d8 3000 	ldr.w	r3, [r8]
 800299a:	461c      	mov	r4, r3
 800299c:	bb44      	cbnz	r4, 80029f0 <_malloc_r+0x88>
 800299e:	4629      	mov	r1, r5
 80029a0:	4630      	mov	r0, r6
 80029a2:	f7ff ffbf 	bl	8002924 <sbrk_aligned>
 80029a6:	1c43      	adds	r3, r0, #1
 80029a8:	4604      	mov	r4, r0
 80029aa:	d158      	bne.n	8002a5e <_malloc_r+0xf6>
 80029ac:	f8d8 4000 	ldr.w	r4, [r8]
 80029b0:	4627      	mov	r7, r4
 80029b2:	2f00      	cmp	r7, #0
 80029b4:	d143      	bne.n	8002a3e <_malloc_r+0xd6>
 80029b6:	2c00      	cmp	r4, #0
 80029b8:	d04b      	beq.n	8002a52 <_malloc_r+0xea>
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	4639      	mov	r1, r7
 80029be:	4630      	mov	r0, r6
 80029c0:	eb04 0903 	add.w	r9, r4, r3
 80029c4:	f000 fc5a 	bl	800327c <_sbrk_r>
 80029c8:	4581      	cmp	r9, r0
 80029ca:	d142      	bne.n	8002a52 <_malloc_r+0xea>
 80029cc:	6821      	ldr	r1, [r4, #0]
 80029ce:	4630      	mov	r0, r6
 80029d0:	1a6d      	subs	r5, r5, r1
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7ff ffa6 	bl	8002924 <sbrk_aligned>
 80029d8:	3001      	adds	r0, #1
 80029da:	d03a      	beq.n	8002a52 <_malloc_r+0xea>
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	442b      	add	r3, r5
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	f8d8 3000 	ldr.w	r3, [r8]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	bb62      	cbnz	r2, 8002a44 <_malloc_r+0xdc>
 80029ea:	f8c8 7000 	str.w	r7, [r8]
 80029ee:	e00f      	b.n	8002a10 <_malloc_r+0xa8>
 80029f0:	6822      	ldr	r2, [r4, #0]
 80029f2:	1b52      	subs	r2, r2, r5
 80029f4:	d420      	bmi.n	8002a38 <_malloc_r+0xd0>
 80029f6:	2a0b      	cmp	r2, #11
 80029f8:	d917      	bls.n	8002a2a <_malloc_r+0xc2>
 80029fa:	1961      	adds	r1, r4, r5
 80029fc:	42a3      	cmp	r3, r4
 80029fe:	6025      	str	r5, [r4, #0]
 8002a00:	bf18      	it	ne
 8002a02:	6059      	strne	r1, [r3, #4]
 8002a04:	6863      	ldr	r3, [r4, #4]
 8002a06:	bf08      	it	eq
 8002a08:	f8c8 1000 	streq.w	r1, [r8]
 8002a0c:	5162      	str	r2, [r4, r5]
 8002a0e:	604b      	str	r3, [r1, #4]
 8002a10:	4630      	mov	r0, r6
 8002a12:	f000 f82f 	bl	8002a74 <__malloc_unlock>
 8002a16:	f104 000b 	add.w	r0, r4, #11
 8002a1a:	1d23      	adds	r3, r4, #4
 8002a1c:	f020 0007 	bic.w	r0, r0, #7
 8002a20:	1ac2      	subs	r2, r0, r3
 8002a22:	bf1c      	itt	ne
 8002a24:	1a1b      	subne	r3, r3, r0
 8002a26:	50a3      	strne	r3, [r4, r2]
 8002a28:	e7af      	b.n	800298a <_malloc_r+0x22>
 8002a2a:	6862      	ldr	r2, [r4, #4]
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	bf0c      	ite	eq
 8002a30:	f8c8 2000 	streq.w	r2, [r8]
 8002a34:	605a      	strne	r2, [r3, #4]
 8002a36:	e7eb      	b.n	8002a10 <_malloc_r+0xa8>
 8002a38:	4623      	mov	r3, r4
 8002a3a:	6864      	ldr	r4, [r4, #4]
 8002a3c:	e7ae      	b.n	800299c <_malloc_r+0x34>
 8002a3e:	463c      	mov	r4, r7
 8002a40:	687f      	ldr	r7, [r7, #4]
 8002a42:	e7b6      	b.n	80029b2 <_malloc_r+0x4a>
 8002a44:	461a      	mov	r2, r3
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	42a3      	cmp	r3, r4
 8002a4a:	d1fb      	bne.n	8002a44 <_malloc_r+0xdc>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6053      	str	r3, [r2, #4]
 8002a50:	e7de      	b.n	8002a10 <_malloc_r+0xa8>
 8002a52:	230c      	movs	r3, #12
 8002a54:	4630      	mov	r0, r6
 8002a56:	6033      	str	r3, [r6, #0]
 8002a58:	f000 f80c 	bl	8002a74 <__malloc_unlock>
 8002a5c:	e794      	b.n	8002988 <_malloc_r+0x20>
 8002a5e:	6005      	str	r5, [r0, #0]
 8002a60:	e7d6      	b.n	8002a10 <_malloc_r+0xa8>
 8002a62:	bf00      	nop
 8002a64:	2000026c 	.word	0x2000026c

08002a68 <__malloc_lock>:
 8002a68:	4801      	ldr	r0, [pc, #4]	@ (8002a70 <__malloc_lock+0x8>)
 8002a6a:	f7ff bf10 	b.w	800288e <__retarget_lock_acquire_recursive>
 8002a6e:	bf00      	nop
 8002a70:	20000264 	.word	0x20000264

08002a74 <__malloc_unlock>:
 8002a74:	4801      	ldr	r0, [pc, #4]	@ (8002a7c <__malloc_unlock+0x8>)
 8002a76:	f7ff bf0b 	b.w	8002890 <__retarget_lock_release_recursive>
 8002a7a:	bf00      	nop
 8002a7c:	20000264 	.word	0x20000264

08002a80 <__sfputc_r>:
 8002a80:	6893      	ldr	r3, [r2, #8]
 8002a82:	b410      	push	{r4}
 8002a84:	3b01      	subs	r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	6093      	str	r3, [r2, #8]
 8002a8a:	da07      	bge.n	8002a9c <__sfputc_r+0x1c>
 8002a8c:	6994      	ldr	r4, [r2, #24]
 8002a8e:	42a3      	cmp	r3, r4
 8002a90:	db01      	blt.n	8002a96 <__sfputc_r+0x16>
 8002a92:	290a      	cmp	r1, #10
 8002a94:	d102      	bne.n	8002a9c <__sfputc_r+0x1c>
 8002a96:	bc10      	pop	{r4}
 8002a98:	f7ff bdeb 	b.w	8002672 <__swbuf_r>
 8002a9c:	6813      	ldr	r3, [r2, #0]
 8002a9e:	1c58      	adds	r0, r3, #1
 8002aa0:	6010      	str	r0, [r2, #0]
 8002aa2:	7019      	strb	r1, [r3, #0]
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	bc10      	pop	{r4}
 8002aa8:	4770      	bx	lr

08002aaa <__sfputs_r>:
 8002aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aac:	4606      	mov	r6, r0
 8002aae:	460f      	mov	r7, r1
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	18d5      	adds	r5, r2, r3
 8002ab4:	42ac      	cmp	r4, r5
 8002ab6:	d101      	bne.n	8002abc <__sfputs_r+0x12>
 8002ab8:	2000      	movs	r0, #0
 8002aba:	e007      	b.n	8002acc <__sfputs_r+0x22>
 8002abc:	463a      	mov	r2, r7
 8002abe:	4630      	mov	r0, r6
 8002ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac4:	f7ff ffdc 	bl	8002a80 <__sfputc_r>
 8002ac8:	1c43      	adds	r3, r0, #1
 8002aca:	d1f3      	bne.n	8002ab4 <__sfputs_r+0xa>
 8002acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ad0 <_vfiprintf_r>:
 8002ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad4:	460d      	mov	r5, r1
 8002ad6:	4614      	mov	r4, r2
 8002ad8:	4698      	mov	r8, r3
 8002ada:	4606      	mov	r6, r0
 8002adc:	b09d      	sub	sp, #116	@ 0x74
 8002ade:	b118      	cbz	r0, 8002ae8 <_vfiprintf_r+0x18>
 8002ae0:	6a03      	ldr	r3, [r0, #32]
 8002ae2:	b90b      	cbnz	r3, 8002ae8 <_vfiprintf_r+0x18>
 8002ae4:	f7ff fcdc 	bl	80024a0 <__sinit>
 8002ae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002aea:	07d9      	lsls	r1, r3, #31
 8002aec:	d405      	bmi.n	8002afa <_vfiprintf_r+0x2a>
 8002aee:	89ab      	ldrh	r3, [r5, #12]
 8002af0:	059a      	lsls	r2, r3, #22
 8002af2:	d402      	bmi.n	8002afa <_vfiprintf_r+0x2a>
 8002af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002af6:	f7ff feca 	bl	800288e <__retarget_lock_acquire_recursive>
 8002afa:	89ab      	ldrh	r3, [r5, #12]
 8002afc:	071b      	lsls	r3, r3, #28
 8002afe:	d501      	bpl.n	8002b04 <_vfiprintf_r+0x34>
 8002b00:	692b      	ldr	r3, [r5, #16]
 8002b02:	b99b      	cbnz	r3, 8002b2c <_vfiprintf_r+0x5c>
 8002b04:	4629      	mov	r1, r5
 8002b06:	4630      	mov	r0, r6
 8002b08:	f7ff fdf2 	bl	80026f0 <__swsetup_r>
 8002b0c:	b170      	cbz	r0, 8002b2c <_vfiprintf_r+0x5c>
 8002b0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b10:	07dc      	lsls	r4, r3, #31
 8002b12:	d504      	bpl.n	8002b1e <_vfiprintf_r+0x4e>
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	b01d      	add	sp, #116	@ 0x74
 8002b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b1e:	89ab      	ldrh	r3, [r5, #12]
 8002b20:	0598      	lsls	r0, r3, #22
 8002b22:	d4f7      	bmi.n	8002b14 <_vfiprintf_r+0x44>
 8002b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b26:	f7ff feb3 	bl	8002890 <__retarget_lock_release_recursive>
 8002b2a:	e7f3      	b.n	8002b14 <_vfiprintf_r+0x44>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b30:	2320      	movs	r3, #32
 8002b32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002b36:	2330      	movs	r3, #48	@ 0x30
 8002b38:	f04f 0901 	mov.w	r9, #1
 8002b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b40:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002cec <_vfiprintf_r+0x21c>
 8002b44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b48:	4623      	mov	r3, r4
 8002b4a:	469a      	mov	sl, r3
 8002b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b50:	b10a      	cbz	r2, 8002b56 <_vfiprintf_r+0x86>
 8002b52:	2a25      	cmp	r2, #37	@ 0x25
 8002b54:	d1f9      	bne.n	8002b4a <_vfiprintf_r+0x7a>
 8002b56:	ebba 0b04 	subs.w	fp, sl, r4
 8002b5a:	d00b      	beq.n	8002b74 <_vfiprintf_r+0xa4>
 8002b5c:	465b      	mov	r3, fp
 8002b5e:	4622      	mov	r2, r4
 8002b60:	4629      	mov	r1, r5
 8002b62:	4630      	mov	r0, r6
 8002b64:	f7ff ffa1 	bl	8002aaa <__sfputs_r>
 8002b68:	3001      	adds	r0, #1
 8002b6a:	f000 80a7 	beq.w	8002cbc <_vfiprintf_r+0x1ec>
 8002b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b70:	445a      	add	r2, fp
 8002b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b74:	f89a 3000 	ldrb.w	r3, [sl]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 809f 	beq.w	8002cbc <_vfiprintf_r+0x1ec>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b88:	f10a 0a01 	add.w	sl, sl, #1
 8002b8c:	9304      	str	r3, [sp, #16]
 8002b8e:	9307      	str	r3, [sp, #28]
 8002b90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b94:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b96:	4654      	mov	r4, sl
 8002b98:	2205      	movs	r2, #5
 8002b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b9e:	4853      	ldr	r0, [pc, #332]	@ (8002cec <_vfiprintf_r+0x21c>)
 8002ba0:	f000 fb7c 	bl	800329c <memchr>
 8002ba4:	9a04      	ldr	r2, [sp, #16]
 8002ba6:	b9d8      	cbnz	r0, 8002be0 <_vfiprintf_r+0x110>
 8002ba8:	06d1      	lsls	r1, r2, #27
 8002baa:	bf44      	itt	mi
 8002bac:	2320      	movmi	r3, #32
 8002bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002bb2:	0713      	lsls	r3, r2, #28
 8002bb4:	bf44      	itt	mi
 8002bb6:	232b      	movmi	r3, #43	@ 0x2b
 8002bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8002bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bc2:	d015      	beq.n	8002bf0 <_vfiprintf_r+0x120>
 8002bc4:	4654      	mov	r4, sl
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f04f 0c0a 	mov.w	ip, #10
 8002bcc:	9a07      	ldr	r2, [sp, #28]
 8002bce:	4621      	mov	r1, r4
 8002bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bd4:	3b30      	subs	r3, #48	@ 0x30
 8002bd6:	2b09      	cmp	r3, #9
 8002bd8:	d94b      	bls.n	8002c72 <_vfiprintf_r+0x1a2>
 8002bda:	b1b0      	cbz	r0, 8002c0a <_vfiprintf_r+0x13a>
 8002bdc:	9207      	str	r2, [sp, #28]
 8002bde:	e014      	b.n	8002c0a <_vfiprintf_r+0x13a>
 8002be0:	eba0 0308 	sub.w	r3, r0, r8
 8002be4:	fa09 f303 	lsl.w	r3, r9, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	46a2      	mov	sl, r4
 8002bec:	9304      	str	r3, [sp, #16]
 8002bee:	e7d2      	b.n	8002b96 <_vfiprintf_r+0xc6>
 8002bf0:	9b03      	ldr	r3, [sp, #12]
 8002bf2:	1d19      	adds	r1, r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	9103      	str	r1, [sp, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bfbb      	ittet	lt
 8002bfc:	425b      	neglt	r3, r3
 8002bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8002c02:	9307      	strge	r3, [sp, #28]
 8002c04:	9307      	strlt	r3, [sp, #28]
 8002c06:	bfb8      	it	lt
 8002c08:	9204      	strlt	r2, [sp, #16]
 8002c0a:	7823      	ldrb	r3, [r4, #0]
 8002c0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c0e:	d10a      	bne.n	8002c26 <_vfiprintf_r+0x156>
 8002c10:	7863      	ldrb	r3, [r4, #1]
 8002c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c14:	d132      	bne.n	8002c7c <_vfiprintf_r+0x1ac>
 8002c16:	9b03      	ldr	r3, [sp, #12]
 8002c18:	3402      	adds	r4, #2
 8002c1a:	1d1a      	adds	r2, r3, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	9203      	str	r2, [sp, #12]
 8002c20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c24:	9305      	str	r3, [sp, #20]
 8002c26:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002cf0 <_vfiprintf_r+0x220>
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	4650      	mov	r0, sl
 8002c2e:	7821      	ldrb	r1, [r4, #0]
 8002c30:	f000 fb34 	bl	800329c <memchr>
 8002c34:	b138      	cbz	r0, 8002c46 <_vfiprintf_r+0x176>
 8002c36:	2240      	movs	r2, #64	@ 0x40
 8002c38:	9b04      	ldr	r3, [sp, #16]
 8002c3a:	eba0 000a 	sub.w	r0, r0, sl
 8002c3e:	4082      	lsls	r2, r0
 8002c40:	4313      	orrs	r3, r2
 8002c42:	3401      	adds	r4, #1
 8002c44:	9304      	str	r3, [sp, #16]
 8002c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c4a:	2206      	movs	r2, #6
 8002c4c:	4829      	ldr	r0, [pc, #164]	@ (8002cf4 <_vfiprintf_r+0x224>)
 8002c4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c52:	f000 fb23 	bl	800329c <memchr>
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d03f      	beq.n	8002cda <_vfiprintf_r+0x20a>
 8002c5a:	4b27      	ldr	r3, [pc, #156]	@ (8002cf8 <_vfiprintf_r+0x228>)
 8002c5c:	bb1b      	cbnz	r3, 8002ca6 <_vfiprintf_r+0x1d6>
 8002c5e:	9b03      	ldr	r3, [sp, #12]
 8002c60:	3307      	adds	r3, #7
 8002c62:	f023 0307 	bic.w	r3, r3, #7
 8002c66:	3308      	adds	r3, #8
 8002c68:	9303      	str	r3, [sp, #12]
 8002c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c6c:	443b      	add	r3, r7
 8002c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c70:	e76a      	b.n	8002b48 <_vfiprintf_r+0x78>
 8002c72:	460c      	mov	r4, r1
 8002c74:	2001      	movs	r0, #1
 8002c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c7a:	e7a8      	b.n	8002bce <_vfiprintf_r+0xfe>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f04f 0c0a 	mov.w	ip, #10
 8002c82:	4619      	mov	r1, r3
 8002c84:	3401      	adds	r4, #1
 8002c86:	9305      	str	r3, [sp, #20]
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c8e:	3a30      	subs	r2, #48	@ 0x30
 8002c90:	2a09      	cmp	r2, #9
 8002c92:	d903      	bls.n	8002c9c <_vfiprintf_r+0x1cc>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0c6      	beq.n	8002c26 <_vfiprintf_r+0x156>
 8002c98:	9105      	str	r1, [sp, #20]
 8002c9a:	e7c4      	b.n	8002c26 <_vfiprintf_r+0x156>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ca4:	e7f0      	b.n	8002c88 <_vfiprintf_r+0x1b8>
 8002ca6:	ab03      	add	r3, sp, #12
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	462a      	mov	r2, r5
 8002cac:	4630      	mov	r0, r6
 8002cae:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <_vfiprintf_r+0x22c>)
 8002cb0:	a904      	add	r1, sp, #16
 8002cb2:	f3af 8000 	nop.w
 8002cb6:	4607      	mov	r7, r0
 8002cb8:	1c78      	adds	r0, r7, #1
 8002cba:	d1d6      	bne.n	8002c6a <_vfiprintf_r+0x19a>
 8002cbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002cbe:	07d9      	lsls	r1, r3, #31
 8002cc0:	d405      	bmi.n	8002cce <_vfiprintf_r+0x1fe>
 8002cc2:	89ab      	ldrh	r3, [r5, #12]
 8002cc4:	059a      	lsls	r2, r3, #22
 8002cc6:	d402      	bmi.n	8002cce <_vfiprintf_r+0x1fe>
 8002cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cca:	f7ff fde1 	bl	8002890 <__retarget_lock_release_recursive>
 8002cce:	89ab      	ldrh	r3, [r5, #12]
 8002cd0:	065b      	lsls	r3, r3, #25
 8002cd2:	f53f af1f 	bmi.w	8002b14 <_vfiprintf_r+0x44>
 8002cd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002cd8:	e71e      	b.n	8002b18 <_vfiprintf_r+0x48>
 8002cda:	ab03      	add	r3, sp, #12
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	462a      	mov	r2, r5
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <_vfiprintf_r+0x22c>)
 8002ce4:	a904      	add	r1, sp, #16
 8002ce6:	f000 f87d 	bl	8002de4 <_printf_i>
 8002cea:	e7e4      	b.n	8002cb6 <_vfiprintf_r+0x1e6>
 8002cec:	0800334e 	.word	0x0800334e
 8002cf0:	08003354 	.word	0x08003354
 8002cf4:	08003358 	.word	0x08003358
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	08002aab 	.word	0x08002aab

08002d00 <_printf_common>:
 8002d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d04:	4616      	mov	r6, r2
 8002d06:	4698      	mov	r8, r3
 8002d08:	688a      	ldr	r2, [r1, #8]
 8002d0a:	690b      	ldr	r3, [r1, #16]
 8002d0c:	4607      	mov	r7, r0
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	bfb8      	it	lt
 8002d12:	4613      	movlt	r3, r2
 8002d14:	6033      	str	r3, [r6, #0]
 8002d16:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002d20:	b10a      	cbz	r2, 8002d26 <_printf_common+0x26>
 8002d22:	3301      	adds	r3, #1
 8002d24:	6033      	str	r3, [r6, #0]
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	0699      	lsls	r1, r3, #26
 8002d2a:	bf42      	ittt	mi
 8002d2c:	6833      	ldrmi	r3, [r6, #0]
 8002d2e:	3302      	addmi	r3, #2
 8002d30:	6033      	strmi	r3, [r6, #0]
 8002d32:	6825      	ldr	r5, [r4, #0]
 8002d34:	f015 0506 	ands.w	r5, r5, #6
 8002d38:	d106      	bne.n	8002d48 <_printf_common+0x48>
 8002d3a:	f104 0a19 	add.w	sl, r4, #25
 8002d3e:	68e3      	ldr	r3, [r4, #12]
 8002d40:	6832      	ldr	r2, [r6, #0]
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	42ab      	cmp	r3, r5
 8002d46:	dc2b      	bgt.n	8002da0 <_printf_common+0xa0>
 8002d48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	3b00      	subs	r3, #0
 8002d50:	bf18      	it	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	0692      	lsls	r2, r2, #26
 8002d56:	d430      	bmi.n	8002dba <_printf_common+0xba>
 8002d58:	4641      	mov	r1, r8
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d60:	47c8      	blx	r9
 8002d62:	3001      	adds	r0, #1
 8002d64:	d023      	beq.n	8002dae <_printf_common+0xae>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	6922      	ldr	r2, [r4, #16]
 8002d6a:	f003 0306 	and.w	r3, r3, #6
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf14      	ite	ne
 8002d72:	2500      	movne	r5, #0
 8002d74:	6833      	ldreq	r3, [r6, #0]
 8002d76:	f04f 0600 	mov.w	r6, #0
 8002d7a:	bf08      	it	eq
 8002d7c:	68e5      	ldreq	r5, [r4, #12]
 8002d7e:	f104 041a 	add.w	r4, r4, #26
 8002d82:	bf08      	it	eq
 8002d84:	1aed      	subeq	r5, r5, r3
 8002d86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d8a:	bf08      	it	eq
 8002d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d90:	4293      	cmp	r3, r2
 8002d92:	bfc4      	itt	gt
 8002d94:	1a9b      	subgt	r3, r3, r2
 8002d96:	18ed      	addgt	r5, r5, r3
 8002d98:	42b5      	cmp	r5, r6
 8002d9a:	d11a      	bne.n	8002dd2 <_printf_common+0xd2>
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	e008      	b.n	8002db2 <_printf_common+0xb2>
 8002da0:	2301      	movs	r3, #1
 8002da2:	4652      	mov	r2, sl
 8002da4:	4641      	mov	r1, r8
 8002da6:	4638      	mov	r0, r7
 8002da8:	47c8      	blx	r9
 8002daa:	3001      	adds	r0, #1
 8002dac:	d103      	bne.n	8002db6 <_printf_common+0xb6>
 8002dae:	f04f 30ff 	mov.w	r0, #4294967295
 8002db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db6:	3501      	adds	r5, #1
 8002db8:	e7c1      	b.n	8002d3e <_printf_common+0x3e>
 8002dba:	2030      	movs	r0, #48	@ 0x30
 8002dbc:	18e1      	adds	r1, r4, r3
 8002dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002dc8:	4422      	add	r2, r4
 8002dca:	3302      	adds	r3, #2
 8002dcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002dd0:	e7c2      	b.n	8002d58 <_printf_common+0x58>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	4641      	mov	r1, r8
 8002dd8:	4638      	mov	r0, r7
 8002dda:	47c8      	blx	r9
 8002ddc:	3001      	adds	r0, #1
 8002dde:	d0e6      	beq.n	8002dae <_printf_common+0xae>
 8002de0:	3601      	adds	r6, #1
 8002de2:	e7d9      	b.n	8002d98 <_printf_common+0x98>

08002de4 <_printf_i>:
 8002de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002de8:	7e0f      	ldrb	r7, [r1, #24]
 8002dea:	4691      	mov	r9, r2
 8002dec:	2f78      	cmp	r7, #120	@ 0x78
 8002dee:	4680      	mov	r8, r0
 8002df0:	460c      	mov	r4, r1
 8002df2:	469a      	mov	sl, r3
 8002df4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002dfa:	d807      	bhi.n	8002e0c <_printf_i+0x28>
 8002dfc:	2f62      	cmp	r7, #98	@ 0x62
 8002dfe:	d80a      	bhi.n	8002e16 <_printf_i+0x32>
 8002e00:	2f00      	cmp	r7, #0
 8002e02:	f000 80d3 	beq.w	8002fac <_printf_i+0x1c8>
 8002e06:	2f58      	cmp	r7, #88	@ 0x58
 8002e08:	f000 80ba 	beq.w	8002f80 <_printf_i+0x19c>
 8002e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002e14:	e03a      	b.n	8002e8c <_printf_i+0xa8>
 8002e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002e1a:	2b15      	cmp	r3, #21
 8002e1c:	d8f6      	bhi.n	8002e0c <_printf_i+0x28>
 8002e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8002e24 <_printf_i+0x40>)
 8002e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e24:	08002e7d 	.word	0x08002e7d
 8002e28:	08002e91 	.word	0x08002e91
 8002e2c:	08002e0d 	.word	0x08002e0d
 8002e30:	08002e0d 	.word	0x08002e0d
 8002e34:	08002e0d 	.word	0x08002e0d
 8002e38:	08002e0d 	.word	0x08002e0d
 8002e3c:	08002e91 	.word	0x08002e91
 8002e40:	08002e0d 	.word	0x08002e0d
 8002e44:	08002e0d 	.word	0x08002e0d
 8002e48:	08002e0d 	.word	0x08002e0d
 8002e4c:	08002e0d 	.word	0x08002e0d
 8002e50:	08002f93 	.word	0x08002f93
 8002e54:	08002ebb 	.word	0x08002ebb
 8002e58:	08002f4d 	.word	0x08002f4d
 8002e5c:	08002e0d 	.word	0x08002e0d
 8002e60:	08002e0d 	.word	0x08002e0d
 8002e64:	08002fb5 	.word	0x08002fb5
 8002e68:	08002e0d 	.word	0x08002e0d
 8002e6c:	08002ebb 	.word	0x08002ebb
 8002e70:	08002e0d 	.word	0x08002e0d
 8002e74:	08002e0d 	.word	0x08002e0d
 8002e78:	08002f55 	.word	0x08002f55
 8002e7c:	6833      	ldr	r3, [r6, #0]
 8002e7e:	1d1a      	adds	r2, r3, #4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6032      	str	r2, [r6, #0]
 8002e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e09e      	b.n	8002fce <_printf_i+0x1ea>
 8002e90:	6833      	ldr	r3, [r6, #0]
 8002e92:	6820      	ldr	r0, [r4, #0]
 8002e94:	1d19      	adds	r1, r3, #4
 8002e96:	6031      	str	r1, [r6, #0]
 8002e98:	0606      	lsls	r6, r0, #24
 8002e9a:	d501      	bpl.n	8002ea0 <_printf_i+0xbc>
 8002e9c:	681d      	ldr	r5, [r3, #0]
 8002e9e:	e003      	b.n	8002ea8 <_printf_i+0xc4>
 8002ea0:	0645      	lsls	r5, r0, #25
 8002ea2:	d5fb      	bpl.n	8002e9c <_printf_i+0xb8>
 8002ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ea8:	2d00      	cmp	r5, #0
 8002eaa:	da03      	bge.n	8002eb4 <_printf_i+0xd0>
 8002eac:	232d      	movs	r3, #45	@ 0x2d
 8002eae:	426d      	negs	r5, r5
 8002eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002eb4:	230a      	movs	r3, #10
 8002eb6:	4859      	ldr	r0, [pc, #356]	@ (800301c <_printf_i+0x238>)
 8002eb8:	e011      	b.n	8002ede <_printf_i+0xfa>
 8002eba:	6821      	ldr	r1, [r4, #0]
 8002ebc:	6833      	ldr	r3, [r6, #0]
 8002ebe:	0608      	lsls	r0, r1, #24
 8002ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ec4:	d402      	bmi.n	8002ecc <_printf_i+0xe8>
 8002ec6:	0649      	lsls	r1, r1, #25
 8002ec8:	bf48      	it	mi
 8002eca:	b2ad      	uxthmi	r5, r5
 8002ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8002ece:	6033      	str	r3, [r6, #0]
 8002ed0:	bf14      	ite	ne
 8002ed2:	230a      	movne	r3, #10
 8002ed4:	2308      	moveq	r3, #8
 8002ed6:	4851      	ldr	r0, [pc, #324]	@ (800301c <_printf_i+0x238>)
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002ede:	6866      	ldr	r6, [r4, #4]
 8002ee0:	2e00      	cmp	r6, #0
 8002ee2:	bfa8      	it	ge
 8002ee4:	6821      	ldrge	r1, [r4, #0]
 8002ee6:	60a6      	str	r6, [r4, #8]
 8002ee8:	bfa4      	itt	ge
 8002eea:	f021 0104 	bicge.w	r1, r1, #4
 8002eee:	6021      	strge	r1, [r4, #0]
 8002ef0:	b90d      	cbnz	r5, 8002ef6 <_printf_i+0x112>
 8002ef2:	2e00      	cmp	r6, #0
 8002ef4:	d04b      	beq.n	8002f8e <_printf_i+0x1aa>
 8002ef6:	4616      	mov	r6, r2
 8002ef8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002efc:	fb03 5711 	mls	r7, r3, r1, r5
 8002f00:	5dc7      	ldrb	r7, [r0, r7]
 8002f02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f06:	462f      	mov	r7, r5
 8002f08:	42bb      	cmp	r3, r7
 8002f0a:	460d      	mov	r5, r1
 8002f0c:	d9f4      	bls.n	8002ef8 <_printf_i+0x114>
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d10b      	bne.n	8002f2a <_printf_i+0x146>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	07df      	lsls	r7, r3, #31
 8002f16:	d508      	bpl.n	8002f2a <_printf_i+0x146>
 8002f18:	6923      	ldr	r3, [r4, #16]
 8002f1a:	6861      	ldr	r1, [r4, #4]
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	bfde      	ittt	le
 8002f20:	2330      	movle	r3, #48	@ 0x30
 8002f22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f2a:	1b92      	subs	r2, r2, r6
 8002f2c:	6122      	str	r2, [r4, #16]
 8002f2e:	464b      	mov	r3, r9
 8002f30:	4621      	mov	r1, r4
 8002f32:	4640      	mov	r0, r8
 8002f34:	f8cd a000 	str.w	sl, [sp]
 8002f38:	aa03      	add	r2, sp, #12
 8002f3a:	f7ff fee1 	bl	8002d00 <_printf_common>
 8002f3e:	3001      	adds	r0, #1
 8002f40:	d14a      	bne.n	8002fd8 <_printf_i+0x1f4>
 8002f42:	f04f 30ff 	mov.w	r0, #4294967295
 8002f46:	b004      	add	sp, #16
 8002f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	f043 0320 	orr.w	r3, r3, #32
 8002f52:	6023      	str	r3, [r4, #0]
 8002f54:	2778      	movs	r7, #120	@ 0x78
 8002f56:	4832      	ldr	r0, [pc, #200]	@ (8003020 <_printf_i+0x23c>)
 8002f58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	6831      	ldr	r1, [r6, #0]
 8002f60:	061f      	lsls	r7, r3, #24
 8002f62:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f66:	d402      	bmi.n	8002f6e <_printf_i+0x18a>
 8002f68:	065f      	lsls	r7, r3, #25
 8002f6a:	bf48      	it	mi
 8002f6c:	b2ad      	uxthmi	r5, r5
 8002f6e:	6031      	str	r1, [r6, #0]
 8002f70:	07d9      	lsls	r1, r3, #31
 8002f72:	bf44      	itt	mi
 8002f74:	f043 0320 	orrmi.w	r3, r3, #32
 8002f78:	6023      	strmi	r3, [r4, #0]
 8002f7a:	b11d      	cbz	r5, 8002f84 <_printf_i+0x1a0>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	e7ab      	b.n	8002ed8 <_printf_i+0xf4>
 8002f80:	4826      	ldr	r0, [pc, #152]	@ (800301c <_printf_i+0x238>)
 8002f82:	e7e9      	b.n	8002f58 <_printf_i+0x174>
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	f023 0320 	bic.w	r3, r3, #32
 8002f8a:	6023      	str	r3, [r4, #0]
 8002f8c:	e7f6      	b.n	8002f7c <_printf_i+0x198>
 8002f8e:	4616      	mov	r6, r2
 8002f90:	e7bd      	b.n	8002f0e <_printf_i+0x12a>
 8002f92:	6833      	ldr	r3, [r6, #0]
 8002f94:	6825      	ldr	r5, [r4, #0]
 8002f96:	1d18      	adds	r0, r3, #4
 8002f98:	6961      	ldr	r1, [r4, #20]
 8002f9a:	6030      	str	r0, [r6, #0]
 8002f9c:	062e      	lsls	r6, r5, #24
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	d501      	bpl.n	8002fa6 <_printf_i+0x1c2>
 8002fa2:	6019      	str	r1, [r3, #0]
 8002fa4:	e002      	b.n	8002fac <_printf_i+0x1c8>
 8002fa6:	0668      	lsls	r0, r5, #25
 8002fa8:	d5fb      	bpl.n	8002fa2 <_printf_i+0x1be>
 8002faa:	8019      	strh	r1, [r3, #0]
 8002fac:	2300      	movs	r3, #0
 8002fae:	4616      	mov	r6, r2
 8002fb0:	6123      	str	r3, [r4, #16]
 8002fb2:	e7bc      	b.n	8002f2e <_printf_i+0x14a>
 8002fb4:	6833      	ldr	r3, [r6, #0]
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	1d1a      	adds	r2, r3, #4
 8002fba:	6032      	str	r2, [r6, #0]
 8002fbc:	681e      	ldr	r6, [r3, #0]
 8002fbe:	6862      	ldr	r2, [r4, #4]
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	f000 f96b 	bl	800329c <memchr>
 8002fc6:	b108      	cbz	r0, 8002fcc <_printf_i+0x1e8>
 8002fc8:	1b80      	subs	r0, r0, r6
 8002fca:	6060      	str	r0, [r4, #4]
 8002fcc:	6863      	ldr	r3, [r4, #4]
 8002fce:	6123      	str	r3, [r4, #16]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fd6:	e7aa      	b.n	8002f2e <_printf_i+0x14a>
 8002fd8:	4632      	mov	r2, r6
 8002fda:	4649      	mov	r1, r9
 8002fdc:	4640      	mov	r0, r8
 8002fde:	6923      	ldr	r3, [r4, #16]
 8002fe0:	47d0      	blx	sl
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	d0ad      	beq.n	8002f42 <_printf_i+0x15e>
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	079b      	lsls	r3, r3, #30
 8002fea:	d413      	bmi.n	8003014 <_printf_i+0x230>
 8002fec:	68e0      	ldr	r0, [r4, #12]
 8002fee:	9b03      	ldr	r3, [sp, #12]
 8002ff0:	4298      	cmp	r0, r3
 8002ff2:	bfb8      	it	lt
 8002ff4:	4618      	movlt	r0, r3
 8002ff6:	e7a6      	b.n	8002f46 <_printf_i+0x162>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	4632      	mov	r2, r6
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	4640      	mov	r0, r8
 8003000:	47d0      	blx	sl
 8003002:	3001      	adds	r0, #1
 8003004:	d09d      	beq.n	8002f42 <_printf_i+0x15e>
 8003006:	3501      	adds	r5, #1
 8003008:	68e3      	ldr	r3, [r4, #12]
 800300a:	9903      	ldr	r1, [sp, #12]
 800300c:	1a5b      	subs	r3, r3, r1
 800300e:	42ab      	cmp	r3, r5
 8003010:	dcf2      	bgt.n	8002ff8 <_printf_i+0x214>
 8003012:	e7eb      	b.n	8002fec <_printf_i+0x208>
 8003014:	2500      	movs	r5, #0
 8003016:	f104 0619 	add.w	r6, r4, #25
 800301a:	e7f5      	b.n	8003008 <_printf_i+0x224>
 800301c:	0800335f 	.word	0x0800335f
 8003020:	08003370 	.word	0x08003370

08003024 <__sflush_r>:
 8003024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	0716      	lsls	r6, r2, #28
 800302c:	4605      	mov	r5, r0
 800302e:	460c      	mov	r4, r1
 8003030:	d454      	bmi.n	80030dc <__sflush_r+0xb8>
 8003032:	684b      	ldr	r3, [r1, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	dc02      	bgt.n	800303e <__sflush_r+0x1a>
 8003038:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	dd48      	ble.n	80030d0 <__sflush_r+0xac>
 800303e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003040:	2e00      	cmp	r6, #0
 8003042:	d045      	beq.n	80030d0 <__sflush_r+0xac>
 8003044:	2300      	movs	r3, #0
 8003046:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800304a:	682f      	ldr	r7, [r5, #0]
 800304c:	6a21      	ldr	r1, [r4, #32]
 800304e:	602b      	str	r3, [r5, #0]
 8003050:	d030      	beq.n	80030b4 <__sflush_r+0x90>
 8003052:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	0759      	lsls	r1, r3, #29
 8003058:	d505      	bpl.n	8003066 <__sflush_r+0x42>
 800305a:	6863      	ldr	r3, [r4, #4]
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003060:	b10b      	cbz	r3, 8003066 <__sflush_r+0x42>
 8003062:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	2300      	movs	r3, #0
 8003068:	4628      	mov	r0, r5
 800306a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800306c:	6a21      	ldr	r1, [r4, #32]
 800306e:	47b0      	blx	r6
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	d106      	bne.n	8003084 <__sflush_r+0x60>
 8003076:	6829      	ldr	r1, [r5, #0]
 8003078:	291d      	cmp	r1, #29
 800307a:	d82b      	bhi.n	80030d4 <__sflush_r+0xb0>
 800307c:	4a28      	ldr	r2, [pc, #160]	@ (8003120 <__sflush_r+0xfc>)
 800307e:	410a      	asrs	r2, r1
 8003080:	07d6      	lsls	r6, r2, #31
 8003082:	d427      	bmi.n	80030d4 <__sflush_r+0xb0>
 8003084:	2200      	movs	r2, #0
 8003086:	6062      	str	r2, [r4, #4]
 8003088:	6922      	ldr	r2, [r4, #16]
 800308a:	04d9      	lsls	r1, r3, #19
 800308c:	6022      	str	r2, [r4, #0]
 800308e:	d504      	bpl.n	800309a <__sflush_r+0x76>
 8003090:	1c42      	adds	r2, r0, #1
 8003092:	d101      	bne.n	8003098 <__sflush_r+0x74>
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	b903      	cbnz	r3, 800309a <__sflush_r+0x76>
 8003098:	6560      	str	r0, [r4, #84]	@ 0x54
 800309a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800309c:	602f      	str	r7, [r5, #0]
 800309e:	b1b9      	cbz	r1, 80030d0 <__sflush_r+0xac>
 80030a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030a4:	4299      	cmp	r1, r3
 80030a6:	d002      	beq.n	80030ae <__sflush_r+0x8a>
 80030a8:	4628      	mov	r0, r5
 80030aa:	f7ff fbf3 	bl	8002894 <_free_r>
 80030ae:	2300      	movs	r3, #0
 80030b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80030b2:	e00d      	b.n	80030d0 <__sflush_r+0xac>
 80030b4:	2301      	movs	r3, #1
 80030b6:	4628      	mov	r0, r5
 80030b8:	47b0      	blx	r6
 80030ba:	4602      	mov	r2, r0
 80030bc:	1c50      	adds	r0, r2, #1
 80030be:	d1c9      	bne.n	8003054 <__sflush_r+0x30>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0c6      	beq.n	8003054 <__sflush_r+0x30>
 80030c6:	2b1d      	cmp	r3, #29
 80030c8:	d001      	beq.n	80030ce <__sflush_r+0xaa>
 80030ca:	2b16      	cmp	r3, #22
 80030cc:	d11d      	bne.n	800310a <__sflush_r+0xe6>
 80030ce:	602f      	str	r7, [r5, #0]
 80030d0:	2000      	movs	r0, #0
 80030d2:	e021      	b.n	8003118 <__sflush_r+0xf4>
 80030d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030d8:	b21b      	sxth	r3, r3
 80030da:	e01a      	b.n	8003112 <__sflush_r+0xee>
 80030dc:	690f      	ldr	r7, [r1, #16]
 80030de:	2f00      	cmp	r7, #0
 80030e0:	d0f6      	beq.n	80030d0 <__sflush_r+0xac>
 80030e2:	0793      	lsls	r3, r2, #30
 80030e4:	bf18      	it	ne
 80030e6:	2300      	movne	r3, #0
 80030e8:	680e      	ldr	r6, [r1, #0]
 80030ea:	bf08      	it	eq
 80030ec:	694b      	ldreq	r3, [r1, #20]
 80030ee:	1bf6      	subs	r6, r6, r7
 80030f0:	600f      	str	r7, [r1, #0]
 80030f2:	608b      	str	r3, [r1, #8]
 80030f4:	2e00      	cmp	r6, #0
 80030f6:	ddeb      	ble.n	80030d0 <__sflush_r+0xac>
 80030f8:	4633      	mov	r3, r6
 80030fa:	463a      	mov	r2, r7
 80030fc:	4628      	mov	r0, r5
 80030fe:	6a21      	ldr	r1, [r4, #32]
 8003100:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003104:	47e0      	blx	ip
 8003106:	2800      	cmp	r0, #0
 8003108:	dc07      	bgt.n	800311a <__sflush_r+0xf6>
 800310a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800310e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003112:	f04f 30ff 	mov.w	r0, #4294967295
 8003116:	81a3      	strh	r3, [r4, #12]
 8003118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800311a:	4407      	add	r7, r0
 800311c:	1a36      	subs	r6, r6, r0
 800311e:	e7e9      	b.n	80030f4 <__sflush_r+0xd0>
 8003120:	dfbffffe 	.word	0xdfbffffe

08003124 <_fflush_r>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	690b      	ldr	r3, [r1, #16]
 8003128:	4605      	mov	r5, r0
 800312a:	460c      	mov	r4, r1
 800312c:	b913      	cbnz	r3, 8003134 <_fflush_r+0x10>
 800312e:	2500      	movs	r5, #0
 8003130:	4628      	mov	r0, r5
 8003132:	bd38      	pop	{r3, r4, r5, pc}
 8003134:	b118      	cbz	r0, 800313e <_fflush_r+0x1a>
 8003136:	6a03      	ldr	r3, [r0, #32]
 8003138:	b90b      	cbnz	r3, 800313e <_fflush_r+0x1a>
 800313a:	f7ff f9b1 	bl	80024a0 <__sinit>
 800313e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f3      	beq.n	800312e <_fflush_r+0xa>
 8003146:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003148:	07d0      	lsls	r0, r2, #31
 800314a:	d404      	bmi.n	8003156 <_fflush_r+0x32>
 800314c:	0599      	lsls	r1, r3, #22
 800314e:	d402      	bmi.n	8003156 <_fflush_r+0x32>
 8003150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003152:	f7ff fb9c 	bl	800288e <__retarget_lock_acquire_recursive>
 8003156:	4628      	mov	r0, r5
 8003158:	4621      	mov	r1, r4
 800315a:	f7ff ff63 	bl	8003024 <__sflush_r>
 800315e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003160:	4605      	mov	r5, r0
 8003162:	07da      	lsls	r2, r3, #31
 8003164:	d4e4      	bmi.n	8003130 <_fflush_r+0xc>
 8003166:	89a3      	ldrh	r3, [r4, #12]
 8003168:	059b      	lsls	r3, r3, #22
 800316a:	d4e1      	bmi.n	8003130 <_fflush_r+0xc>
 800316c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800316e:	f7ff fb8f 	bl	8002890 <__retarget_lock_release_recursive>
 8003172:	e7dd      	b.n	8003130 <_fflush_r+0xc>

08003174 <__swhatbuf_r>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	460c      	mov	r4, r1
 8003178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800317c:	4615      	mov	r5, r2
 800317e:	2900      	cmp	r1, #0
 8003180:	461e      	mov	r6, r3
 8003182:	b096      	sub	sp, #88	@ 0x58
 8003184:	da0c      	bge.n	80031a0 <__swhatbuf_r+0x2c>
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	2100      	movs	r1, #0
 800318a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800318e:	bf14      	ite	ne
 8003190:	2340      	movne	r3, #64	@ 0x40
 8003192:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003196:	2000      	movs	r0, #0
 8003198:	6031      	str	r1, [r6, #0]
 800319a:	602b      	str	r3, [r5, #0]
 800319c:	b016      	add	sp, #88	@ 0x58
 800319e:	bd70      	pop	{r4, r5, r6, pc}
 80031a0:	466a      	mov	r2, sp
 80031a2:	f000 f849 	bl	8003238 <_fstat_r>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	dbed      	blt.n	8003186 <__swhatbuf_r+0x12>
 80031aa:	9901      	ldr	r1, [sp, #4]
 80031ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80031b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80031b4:	4259      	negs	r1, r3
 80031b6:	4159      	adcs	r1, r3
 80031b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031bc:	e7eb      	b.n	8003196 <__swhatbuf_r+0x22>

080031be <__smakebuf_r>:
 80031be:	898b      	ldrh	r3, [r1, #12]
 80031c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031c2:	079d      	lsls	r5, r3, #30
 80031c4:	4606      	mov	r6, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	d507      	bpl.n	80031da <__smakebuf_r+0x1c>
 80031ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	6123      	str	r3, [r4, #16]
 80031d2:	2301      	movs	r3, #1
 80031d4:	6163      	str	r3, [r4, #20]
 80031d6:	b003      	add	sp, #12
 80031d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031da:	466a      	mov	r2, sp
 80031dc:	ab01      	add	r3, sp, #4
 80031de:	f7ff ffc9 	bl	8003174 <__swhatbuf_r>
 80031e2:	9f00      	ldr	r7, [sp, #0]
 80031e4:	4605      	mov	r5, r0
 80031e6:	4639      	mov	r1, r7
 80031e8:	4630      	mov	r0, r6
 80031ea:	f7ff fbbd 	bl	8002968 <_malloc_r>
 80031ee:	b948      	cbnz	r0, 8003204 <__smakebuf_r+0x46>
 80031f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031f4:	059a      	lsls	r2, r3, #22
 80031f6:	d4ee      	bmi.n	80031d6 <__smakebuf_r+0x18>
 80031f8:	f023 0303 	bic.w	r3, r3, #3
 80031fc:	f043 0302 	orr.w	r3, r3, #2
 8003200:	81a3      	strh	r3, [r4, #12]
 8003202:	e7e2      	b.n	80031ca <__smakebuf_r+0xc>
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800320a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800320e:	81a3      	strh	r3, [r4, #12]
 8003210:	9b01      	ldr	r3, [sp, #4]
 8003212:	6020      	str	r0, [r4, #0]
 8003214:	b15b      	cbz	r3, 800322e <__smakebuf_r+0x70>
 8003216:	4630      	mov	r0, r6
 8003218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800321c:	f000 f81e 	bl	800325c <_isatty_r>
 8003220:	b128      	cbz	r0, 800322e <__smakebuf_r+0x70>
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	f023 0303 	bic.w	r3, r3, #3
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	89a3      	ldrh	r3, [r4, #12]
 8003230:	431d      	orrs	r5, r3
 8003232:	81a5      	strh	r5, [r4, #12]
 8003234:	e7cf      	b.n	80031d6 <__smakebuf_r+0x18>
	...

08003238 <_fstat_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	2300      	movs	r3, #0
 800323c:	4d06      	ldr	r5, [pc, #24]	@ (8003258 <_fstat_r+0x20>)
 800323e:	4604      	mov	r4, r0
 8003240:	4608      	mov	r0, r1
 8003242:	4611      	mov	r1, r2
 8003244:	602b      	str	r3, [r5, #0]
 8003246:	f7fd fa11 	bl	800066c <_fstat>
 800324a:	1c43      	adds	r3, r0, #1
 800324c:	d102      	bne.n	8003254 <_fstat_r+0x1c>
 800324e:	682b      	ldr	r3, [r5, #0]
 8003250:	b103      	cbz	r3, 8003254 <_fstat_r+0x1c>
 8003252:	6023      	str	r3, [r4, #0]
 8003254:	bd38      	pop	{r3, r4, r5, pc}
 8003256:	bf00      	nop
 8003258:	20000260 	.word	0x20000260

0800325c <_isatty_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	2300      	movs	r3, #0
 8003260:	4d05      	ldr	r5, [pc, #20]	@ (8003278 <_isatty_r+0x1c>)
 8003262:	4604      	mov	r4, r0
 8003264:	4608      	mov	r0, r1
 8003266:	602b      	str	r3, [r5, #0]
 8003268:	f7fd fa0f 	bl	800068a <_isatty>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d102      	bne.n	8003276 <_isatty_r+0x1a>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	b103      	cbz	r3, 8003276 <_isatty_r+0x1a>
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	20000260 	.word	0x20000260

0800327c <_sbrk_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	2300      	movs	r3, #0
 8003280:	4d05      	ldr	r5, [pc, #20]	@ (8003298 <_sbrk_r+0x1c>)
 8003282:	4604      	mov	r4, r0
 8003284:	4608      	mov	r0, r1
 8003286:	602b      	str	r3, [r5, #0]
 8003288:	f7fd fa16 	bl	80006b8 <_sbrk>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	d102      	bne.n	8003296 <_sbrk_r+0x1a>
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	b103      	cbz	r3, 8003296 <_sbrk_r+0x1a>
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	20000260 	.word	0x20000260

0800329c <memchr>:
 800329c:	4603      	mov	r3, r0
 800329e:	b510      	push	{r4, lr}
 80032a0:	b2c9      	uxtb	r1, r1
 80032a2:	4402      	add	r2, r0
 80032a4:	4293      	cmp	r3, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	d101      	bne.n	80032ae <memchr+0x12>
 80032aa:	2000      	movs	r0, #0
 80032ac:	e003      	b.n	80032b6 <memchr+0x1a>
 80032ae:	7804      	ldrb	r4, [r0, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	428c      	cmp	r4, r1
 80032b4:	d1f6      	bne.n	80032a4 <memchr+0x8>
 80032b6:	bd10      	pop	{r4, pc}

080032b8 <_init>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr

080032c4 <_fini>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr
